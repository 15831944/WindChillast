/* soapH.h
   Generated by gSOAP 2.8.39 for foxwelltech.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_byte(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (soap_read_byte(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_int(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (soap_read_int(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE_ns1__SearchResource_DEFINED
#define SOAP_TYPE_ns1__SearchResource_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SearchResource(struct soap*, struct ns1__SearchResource *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SearchResource(struct soap*, const struct ns1__SearchResource *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SearchResource(struct soap*, const char*, int, const struct ns1__SearchResource *, const char*);
SOAP_FMAC3 struct ns1__SearchResource * SOAP_FMAC4 soap_in_ns1__SearchResource(struct soap*, const char*, struct ns1__SearchResource *, const char*);
SOAP_FMAC1 struct ns1__SearchResource * SOAP_FMAC2 soap_instantiate_ns1__SearchResource(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__SearchResource * soap_new_ns1__SearchResource(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SearchResource(soap, n, NULL, NULL, NULL);
}

inline struct ns1__SearchResource * soap_new_req_ns1__SearchResource(
	struct soap *soap)
{
	struct ns1__SearchResource *_p = soap_new_ns1__SearchResource(soap);
	if (_p)
	{	soap_default_ns1__SearchResource(soap, _p);
	}
	return _p;
}

inline struct ns1__SearchResource * soap_new_set_ns1__SearchResource(
	struct soap *soap,
	char *operType,
	char *resourceNumber)
{
	struct ns1__SearchResource *_p = soap_new_ns1__SearchResource(soap);
	if (_p)
	{	soap_default_ns1__SearchResource(soap, _p);
		_p->operType = operType;
		_p->resourceNumber = resourceNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SearchResource(struct soap*, const struct ns1__SearchResource *, const char*, const char*);

inline int soap_write_ns1__SearchResource(struct soap *soap, struct ns1__SearchResource const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__SearchResource(soap, p), 0) || soap_put_ns1__SearchResource(soap, p, "ns1:SearchResource", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SearchResource(struct soap *soap, const char *URL, struct ns1__SearchResource const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__SearchResource(soap, p), 0) || soap_put_ns1__SearchResource(soap, p, "ns1:SearchResource", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SearchResource(struct soap *soap, const char *URL, struct ns1__SearchResource const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__SearchResource(soap, p), 0) || soap_put_ns1__SearchResource(soap, p, "ns1:SearchResource", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__SearchResource * SOAP_FMAC4 soap_get_ns1__SearchResource(struct soap*, struct ns1__SearchResource *, const char*, const char*);

inline int soap_read_ns1__SearchResource(struct soap *soap, struct ns1__SearchResource *p)
{
	if (p)
	{	soap_default_ns1__SearchResource(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__SearchResource(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SearchResource(struct soap *soap, const char *URL, struct ns1__SearchResource *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SearchResource(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SearchResource(struct soap *soap, struct ns1__SearchResource *p)
{
	if (soap_read_ns1__SearchResource(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SearchResourceResponse_DEFINED
#define SOAP_TYPE_ns1__SearchResourceResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SearchResourceResponse(struct soap*, struct ns1__SearchResourceResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SearchResourceResponse(struct soap*, const struct ns1__SearchResourceResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SearchResourceResponse(struct soap*, const char*, int, const struct ns1__SearchResourceResponse *, const char*);
SOAP_FMAC3 struct ns1__SearchResourceResponse * SOAP_FMAC4 soap_in_ns1__SearchResourceResponse(struct soap*, const char*, struct ns1__SearchResourceResponse *, const char*);
SOAP_FMAC1 struct ns1__SearchResourceResponse * SOAP_FMAC2 soap_instantiate_ns1__SearchResourceResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__SearchResourceResponse * soap_new_ns1__SearchResourceResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SearchResourceResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__SearchResourceResponse * soap_new_req_ns1__SearchResourceResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__SearchResourceResponse *_p = soap_new_ns1__SearchResourceResponse(soap);
	if (_p)
	{	soap_default_ns1__SearchResourceResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__SearchResourceResponse * soap_new_set_ns1__SearchResourceResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__SearchResourceResponse *_p = soap_new_ns1__SearchResourceResponse(soap);
	if (_p)
	{	soap_default_ns1__SearchResourceResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SearchResourceResponse(struct soap*, const struct ns1__SearchResourceResponse *, const char*, const char*);

inline int soap_write_ns1__SearchResourceResponse(struct soap *soap, struct ns1__SearchResourceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__SearchResourceResponse(soap, p), 0) || soap_put_ns1__SearchResourceResponse(soap, p, "ns1:SearchResourceResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SearchResourceResponse(struct soap *soap, const char *URL, struct ns1__SearchResourceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__SearchResourceResponse(soap, p), 0) || soap_put_ns1__SearchResourceResponse(soap, p, "ns1:SearchResourceResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SearchResourceResponse(struct soap *soap, const char *URL, struct ns1__SearchResourceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__SearchResourceResponse(soap, p), 0) || soap_put_ns1__SearchResourceResponse(soap, p, "ns1:SearchResourceResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__SearchResourceResponse * SOAP_FMAC4 soap_get_ns1__SearchResourceResponse(struct soap*, struct ns1__SearchResourceResponse *, const char*, const char*);

inline int soap_read_ns1__SearchResourceResponse(struct soap *soap, struct ns1__SearchResourceResponse *p)
{
	if (p)
	{	soap_default_ns1__SearchResourceResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__SearchResourceResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SearchResourceResponse(struct soap *soap, const char *URL, struct ns1__SearchResourceResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SearchResourceResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SearchResourceResponse(struct soap *soap, struct ns1__SearchResourceResponse *p)
{
	if (soap_read_ns1__SearchResourceResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getDocInfo_DEFINED
#define SOAP_TYPE_ns1__getDocInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getDocInfo(struct soap*, struct ns1__getDocInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getDocInfo(struct soap*, const struct ns1__getDocInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDocInfo(struct soap*, const char*, int, const struct ns1__getDocInfo *, const char*);
SOAP_FMAC3 struct ns1__getDocInfo * SOAP_FMAC4 soap_in_ns1__getDocInfo(struct soap*, const char*, struct ns1__getDocInfo *, const char*);
SOAP_FMAC1 struct ns1__getDocInfo * SOAP_FMAC2 soap_instantiate_ns1__getDocInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getDocInfo * soap_new_ns1__getDocInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getDocInfo(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getDocInfo * soap_new_req_ns1__getDocInfo(
	struct soap *soap)
{
	struct ns1__getDocInfo *_p = soap_new_ns1__getDocInfo(soap);
	if (_p)
	{	soap_default_ns1__getDocInfo(soap, _p);
	}
	return _p;
}

inline struct ns1__getDocInfo * soap_new_set_ns1__getDocInfo(
	struct soap *soap,
	char *operType,
	char *docNumber)
{
	struct ns1__getDocInfo *_p = soap_new_ns1__getDocInfo(soap);
	if (_p)
	{	soap_default_ns1__getDocInfo(soap, _p);
		_p->operType = operType;
		_p->docNumber = docNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getDocInfo(struct soap*, const struct ns1__getDocInfo *, const char*, const char*);

inline int soap_write_ns1__getDocInfo(struct soap *soap, struct ns1__getDocInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getDocInfo(soap, p), 0) || soap_put_ns1__getDocInfo(soap, p, "ns1:getDocInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getDocInfo(struct soap *soap, const char *URL, struct ns1__getDocInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getDocInfo(soap, p), 0) || soap_put_ns1__getDocInfo(soap, p, "ns1:getDocInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getDocInfo(struct soap *soap, const char *URL, struct ns1__getDocInfo const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getDocInfo(soap, p), 0) || soap_put_ns1__getDocInfo(soap, p, "ns1:getDocInfo", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getDocInfo * SOAP_FMAC4 soap_get_ns1__getDocInfo(struct soap*, struct ns1__getDocInfo *, const char*, const char*);

inline int soap_read_ns1__getDocInfo(struct soap *soap, struct ns1__getDocInfo *p)
{
	if (p)
	{	soap_default_ns1__getDocInfo(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getDocInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getDocInfo(struct soap *soap, const char *URL, struct ns1__getDocInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getDocInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getDocInfo(struct soap *soap, struct ns1__getDocInfo *p)
{
	if (soap_read_ns1__getDocInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getDocInfoResponse_DEFINED
#define SOAP_TYPE_ns1__getDocInfoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getDocInfoResponse(struct soap*, struct ns1__getDocInfoResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getDocInfoResponse(struct soap*, const struct ns1__getDocInfoResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDocInfoResponse(struct soap*, const char*, int, const struct ns1__getDocInfoResponse *, const char*);
SOAP_FMAC3 struct ns1__getDocInfoResponse * SOAP_FMAC4 soap_in_ns1__getDocInfoResponse(struct soap*, const char*, struct ns1__getDocInfoResponse *, const char*);
SOAP_FMAC1 struct ns1__getDocInfoResponse * SOAP_FMAC2 soap_instantiate_ns1__getDocInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getDocInfoResponse * soap_new_ns1__getDocInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getDocInfoResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getDocInfoResponse * soap_new_req_ns1__getDocInfoResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getDocInfoResponse *_p = soap_new_ns1__getDocInfoResponse(soap);
	if (_p)
	{	soap_default_ns1__getDocInfoResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__getDocInfoResponse * soap_new_set_ns1__getDocInfoResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getDocInfoResponse *_p = soap_new_ns1__getDocInfoResponse(soap);
	if (_p)
	{	soap_default_ns1__getDocInfoResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getDocInfoResponse(struct soap*, const struct ns1__getDocInfoResponse *, const char*, const char*);

inline int soap_write_ns1__getDocInfoResponse(struct soap *soap, struct ns1__getDocInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getDocInfoResponse(soap, p), 0) || soap_put_ns1__getDocInfoResponse(soap, p, "ns1:getDocInfoResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getDocInfoResponse(struct soap *soap, const char *URL, struct ns1__getDocInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getDocInfoResponse(soap, p), 0) || soap_put_ns1__getDocInfoResponse(soap, p, "ns1:getDocInfoResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getDocInfoResponse(struct soap *soap, const char *URL, struct ns1__getDocInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getDocInfoResponse(soap, p), 0) || soap_put_ns1__getDocInfoResponse(soap, p, "ns1:getDocInfoResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getDocInfoResponse * SOAP_FMAC4 soap_get_ns1__getDocInfoResponse(struct soap*, struct ns1__getDocInfoResponse *, const char*, const char*);

inline int soap_read_ns1__getDocInfoResponse(struct soap *soap, struct ns1__getDocInfoResponse *p)
{
	if (p)
	{	soap_default_ns1__getDocInfoResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getDocInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getDocInfoResponse(struct soap *soap, const char *URL, struct ns1__getDocInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getDocInfoResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getDocInfoResponse(struct soap *soap, struct ns1__getDocInfoResponse *p)
{
	if (soap_read_ns1__getDocInfoResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getDocInfoOfContent_DEFINED
#define SOAP_TYPE_ns1__getDocInfoOfContent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getDocInfoOfContent(struct soap*, struct ns1__getDocInfoOfContent *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getDocInfoOfContent(struct soap*, const struct ns1__getDocInfoOfContent *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDocInfoOfContent(struct soap*, const char*, int, const struct ns1__getDocInfoOfContent *, const char*);
SOAP_FMAC3 struct ns1__getDocInfoOfContent * SOAP_FMAC4 soap_in_ns1__getDocInfoOfContent(struct soap*, const char*, struct ns1__getDocInfoOfContent *, const char*);
SOAP_FMAC1 struct ns1__getDocInfoOfContent * SOAP_FMAC2 soap_instantiate_ns1__getDocInfoOfContent(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getDocInfoOfContent * soap_new_ns1__getDocInfoOfContent(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getDocInfoOfContent(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getDocInfoOfContent * soap_new_req_ns1__getDocInfoOfContent(
	struct soap *soap)
{
	struct ns1__getDocInfoOfContent *_p = soap_new_ns1__getDocInfoOfContent(soap);
	if (_p)
	{	soap_default_ns1__getDocInfoOfContent(soap, _p);
	}
	return _p;
}

inline struct ns1__getDocInfoOfContent * soap_new_set_ns1__getDocInfoOfContent(
	struct soap *soap,
	char *operType,
	char *docNumber)
{
	struct ns1__getDocInfoOfContent *_p = soap_new_ns1__getDocInfoOfContent(soap);
	if (_p)
	{	soap_default_ns1__getDocInfoOfContent(soap, _p);
		_p->operType = operType;
		_p->docNumber = docNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getDocInfoOfContent(struct soap*, const struct ns1__getDocInfoOfContent *, const char*, const char*);

inline int soap_write_ns1__getDocInfoOfContent(struct soap *soap, struct ns1__getDocInfoOfContent const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getDocInfoOfContent(soap, p), 0) || soap_put_ns1__getDocInfoOfContent(soap, p, "ns1:getDocInfoOfContent", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getDocInfoOfContent(struct soap *soap, const char *URL, struct ns1__getDocInfoOfContent const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getDocInfoOfContent(soap, p), 0) || soap_put_ns1__getDocInfoOfContent(soap, p, "ns1:getDocInfoOfContent", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getDocInfoOfContent(struct soap *soap, const char *URL, struct ns1__getDocInfoOfContent const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getDocInfoOfContent(soap, p), 0) || soap_put_ns1__getDocInfoOfContent(soap, p, "ns1:getDocInfoOfContent", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getDocInfoOfContent * SOAP_FMAC4 soap_get_ns1__getDocInfoOfContent(struct soap*, struct ns1__getDocInfoOfContent *, const char*, const char*);

inline int soap_read_ns1__getDocInfoOfContent(struct soap *soap, struct ns1__getDocInfoOfContent *p)
{
	if (p)
	{	soap_default_ns1__getDocInfoOfContent(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getDocInfoOfContent(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getDocInfoOfContent(struct soap *soap, const char *URL, struct ns1__getDocInfoOfContent *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getDocInfoOfContent(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getDocInfoOfContent(struct soap *soap, struct ns1__getDocInfoOfContent *p)
{
	if (soap_read_ns1__getDocInfoOfContent(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getDocInfoOfContentResponse_DEFINED
#define SOAP_TYPE_ns1__getDocInfoOfContentResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getDocInfoOfContentResponse(struct soap*, struct ns1__getDocInfoOfContentResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getDocInfoOfContentResponse(struct soap*, const struct ns1__getDocInfoOfContentResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDocInfoOfContentResponse(struct soap*, const char*, int, const struct ns1__getDocInfoOfContentResponse *, const char*);
SOAP_FMAC3 struct ns1__getDocInfoOfContentResponse * SOAP_FMAC4 soap_in_ns1__getDocInfoOfContentResponse(struct soap*, const char*, struct ns1__getDocInfoOfContentResponse *, const char*);
SOAP_FMAC1 struct ns1__getDocInfoOfContentResponse * SOAP_FMAC2 soap_instantiate_ns1__getDocInfoOfContentResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getDocInfoOfContentResponse * soap_new_ns1__getDocInfoOfContentResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getDocInfoOfContentResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getDocInfoOfContentResponse * soap_new_req_ns1__getDocInfoOfContentResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getDocInfoOfContentResponse *_p = soap_new_ns1__getDocInfoOfContentResponse(soap);
	if (_p)
	{	soap_default_ns1__getDocInfoOfContentResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__getDocInfoOfContentResponse * soap_new_set_ns1__getDocInfoOfContentResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getDocInfoOfContentResponse *_p = soap_new_ns1__getDocInfoOfContentResponse(soap);
	if (_p)
	{	soap_default_ns1__getDocInfoOfContentResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getDocInfoOfContentResponse(struct soap*, const struct ns1__getDocInfoOfContentResponse *, const char*, const char*);

inline int soap_write_ns1__getDocInfoOfContentResponse(struct soap *soap, struct ns1__getDocInfoOfContentResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getDocInfoOfContentResponse(soap, p), 0) || soap_put_ns1__getDocInfoOfContentResponse(soap, p, "ns1:getDocInfoOfContentResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getDocInfoOfContentResponse(struct soap *soap, const char *URL, struct ns1__getDocInfoOfContentResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getDocInfoOfContentResponse(soap, p), 0) || soap_put_ns1__getDocInfoOfContentResponse(soap, p, "ns1:getDocInfoOfContentResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getDocInfoOfContentResponse(struct soap *soap, const char *URL, struct ns1__getDocInfoOfContentResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getDocInfoOfContentResponse(soap, p), 0) || soap_put_ns1__getDocInfoOfContentResponse(soap, p, "ns1:getDocInfoOfContentResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getDocInfoOfContentResponse * SOAP_FMAC4 soap_get_ns1__getDocInfoOfContentResponse(struct soap*, struct ns1__getDocInfoOfContentResponse *, const char*, const char*);

inline int soap_read_ns1__getDocInfoOfContentResponse(struct soap *soap, struct ns1__getDocInfoOfContentResponse *p)
{
	if (p)
	{	soap_default_ns1__getDocInfoOfContentResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getDocInfoOfContentResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getDocInfoOfContentResponse(struct soap *soap, const char *URL, struct ns1__getDocInfoOfContentResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getDocInfoOfContentResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getDocInfoOfContentResponse(struct soap *soap, struct ns1__getDocInfoOfContentResponse *p)
{
	if (soap_read_ns1__getDocInfoOfContentResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getBOMOfHsf_DEFINED
#define SOAP_TYPE_ns1__getBOMOfHsf_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getBOMOfHsf(struct soap*, struct ns1__getBOMOfHsf *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getBOMOfHsf(struct soap*, const struct ns1__getBOMOfHsf *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getBOMOfHsf(struct soap*, const char*, int, const struct ns1__getBOMOfHsf *, const char*);
SOAP_FMAC3 struct ns1__getBOMOfHsf * SOAP_FMAC4 soap_in_ns1__getBOMOfHsf(struct soap*, const char*, struct ns1__getBOMOfHsf *, const char*);
SOAP_FMAC1 struct ns1__getBOMOfHsf * SOAP_FMAC2 soap_instantiate_ns1__getBOMOfHsf(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getBOMOfHsf * soap_new_ns1__getBOMOfHsf(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getBOMOfHsf(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getBOMOfHsf * soap_new_req_ns1__getBOMOfHsf(
	struct soap *soap)
{
	struct ns1__getBOMOfHsf *_p = soap_new_ns1__getBOMOfHsf(soap);
	if (_p)
	{	soap_default_ns1__getBOMOfHsf(soap, _p);
	}
	return _p;
}

inline struct ns1__getBOMOfHsf * soap_new_set_ns1__getBOMOfHsf(
	struct soap *soap,
	char *operType,
	char *partNumber)
{
	struct ns1__getBOMOfHsf *_p = soap_new_ns1__getBOMOfHsf(soap);
	if (_p)
	{	soap_default_ns1__getBOMOfHsf(soap, _p);
		_p->operType = operType;
		_p->partNumber = partNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getBOMOfHsf(struct soap*, const struct ns1__getBOMOfHsf *, const char*, const char*);

inline int soap_write_ns1__getBOMOfHsf(struct soap *soap, struct ns1__getBOMOfHsf const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getBOMOfHsf(soap, p), 0) || soap_put_ns1__getBOMOfHsf(soap, p, "ns1:getBOMOfHsf", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getBOMOfHsf(struct soap *soap, const char *URL, struct ns1__getBOMOfHsf const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getBOMOfHsf(soap, p), 0) || soap_put_ns1__getBOMOfHsf(soap, p, "ns1:getBOMOfHsf", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getBOMOfHsf(struct soap *soap, const char *URL, struct ns1__getBOMOfHsf const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getBOMOfHsf(soap, p), 0) || soap_put_ns1__getBOMOfHsf(soap, p, "ns1:getBOMOfHsf", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getBOMOfHsf * SOAP_FMAC4 soap_get_ns1__getBOMOfHsf(struct soap*, struct ns1__getBOMOfHsf *, const char*, const char*);

inline int soap_read_ns1__getBOMOfHsf(struct soap *soap, struct ns1__getBOMOfHsf *p)
{
	if (p)
	{	soap_default_ns1__getBOMOfHsf(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getBOMOfHsf(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getBOMOfHsf(struct soap *soap, const char *URL, struct ns1__getBOMOfHsf *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getBOMOfHsf(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getBOMOfHsf(struct soap *soap, struct ns1__getBOMOfHsf *p)
{
	if (soap_read_ns1__getBOMOfHsf(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getBOMOfHsfResponse_DEFINED
#define SOAP_TYPE_ns1__getBOMOfHsfResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getBOMOfHsfResponse(struct soap*, struct ns1__getBOMOfHsfResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getBOMOfHsfResponse(struct soap*, const struct ns1__getBOMOfHsfResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getBOMOfHsfResponse(struct soap*, const char*, int, const struct ns1__getBOMOfHsfResponse *, const char*);
SOAP_FMAC3 struct ns1__getBOMOfHsfResponse * SOAP_FMAC4 soap_in_ns1__getBOMOfHsfResponse(struct soap*, const char*, struct ns1__getBOMOfHsfResponse *, const char*);
SOAP_FMAC1 struct ns1__getBOMOfHsfResponse * SOAP_FMAC2 soap_instantiate_ns1__getBOMOfHsfResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getBOMOfHsfResponse * soap_new_ns1__getBOMOfHsfResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getBOMOfHsfResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getBOMOfHsfResponse * soap_new_req_ns1__getBOMOfHsfResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getBOMOfHsfResponse *_p = soap_new_ns1__getBOMOfHsfResponse(soap);
	if (_p)
	{	soap_default_ns1__getBOMOfHsfResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__getBOMOfHsfResponse * soap_new_set_ns1__getBOMOfHsfResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getBOMOfHsfResponse *_p = soap_new_ns1__getBOMOfHsfResponse(soap);
	if (_p)
	{	soap_default_ns1__getBOMOfHsfResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getBOMOfHsfResponse(struct soap*, const struct ns1__getBOMOfHsfResponse *, const char*, const char*);

inline int soap_write_ns1__getBOMOfHsfResponse(struct soap *soap, struct ns1__getBOMOfHsfResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getBOMOfHsfResponse(soap, p), 0) || soap_put_ns1__getBOMOfHsfResponse(soap, p, "ns1:getBOMOfHsfResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getBOMOfHsfResponse(struct soap *soap, const char *URL, struct ns1__getBOMOfHsfResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getBOMOfHsfResponse(soap, p), 0) || soap_put_ns1__getBOMOfHsfResponse(soap, p, "ns1:getBOMOfHsfResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getBOMOfHsfResponse(struct soap *soap, const char *URL, struct ns1__getBOMOfHsfResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getBOMOfHsfResponse(soap, p), 0) || soap_put_ns1__getBOMOfHsfResponse(soap, p, "ns1:getBOMOfHsfResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getBOMOfHsfResponse * SOAP_FMAC4 soap_get_ns1__getBOMOfHsfResponse(struct soap*, struct ns1__getBOMOfHsfResponse *, const char*, const char*);

inline int soap_read_ns1__getBOMOfHsfResponse(struct soap *soap, struct ns1__getBOMOfHsfResponse *p)
{
	if (p)
	{	soap_default_ns1__getBOMOfHsfResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getBOMOfHsfResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getBOMOfHsfResponse(struct soap *soap, const char *URL, struct ns1__getBOMOfHsfResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getBOMOfHsfResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getBOMOfHsfResponse(struct soap *soap, struct ns1__getBOMOfHsfResponse *p)
{
	if (soap_read_ns1__getBOMOfHsfResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__checkInDoc_DEFINED
#define SOAP_TYPE_ns1__checkInDoc_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__checkInDoc(struct soap*, struct ns1__checkInDoc *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__checkInDoc(struct soap*, const struct ns1__checkInDoc *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__checkInDoc(struct soap*, const char*, int, const struct ns1__checkInDoc *, const char*);
SOAP_FMAC3 struct ns1__checkInDoc * SOAP_FMAC4 soap_in_ns1__checkInDoc(struct soap*, const char*, struct ns1__checkInDoc *, const char*);
SOAP_FMAC1 struct ns1__checkInDoc * SOAP_FMAC2 soap_instantiate_ns1__checkInDoc(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__checkInDoc * soap_new_ns1__checkInDoc(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__checkInDoc(soap, n, NULL, NULL, NULL);
}

inline struct ns1__checkInDoc * soap_new_req_ns1__checkInDoc(
	struct soap *soap)
{
	struct ns1__checkInDoc *_p = soap_new_ns1__checkInDoc(soap);
	if (_p)
	{	soap_default_ns1__checkInDoc(soap, _p);
	}
	return _p;
}

inline struct ns1__checkInDoc * soap_new_set_ns1__checkInDoc(
	struct soap *soap,
	char *operType,
	char *fileName)
{
	struct ns1__checkInDoc *_p = soap_new_ns1__checkInDoc(soap);
	if (_p)
	{	soap_default_ns1__checkInDoc(soap, _p);
		_p->operType = operType;
		_p->fileName = fileName;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__checkInDoc(struct soap*, const struct ns1__checkInDoc *, const char*, const char*);

inline int soap_write_ns1__checkInDoc(struct soap *soap, struct ns1__checkInDoc const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__checkInDoc(soap, p), 0) || soap_put_ns1__checkInDoc(soap, p, "ns1:checkInDoc", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__checkInDoc(struct soap *soap, const char *URL, struct ns1__checkInDoc const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__checkInDoc(soap, p), 0) || soap_put_ns1__checkInDoc(soap, p, "ns1:checkInDoc", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__checkInDoc(struct soap *soap, const char *URL, struct ns1__checkInDoc const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__checkInDoc(soap, p), 0) || soap_put_ns1__checkInDoc(soap, p, "ns1:checkInDoc", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__checkInDoc * SOAP_FMAC4 soap_get_ns1__checkInDoc(struct soap*, struct ns1__checkInDoc *, const char*, const char*);

inline int soap_read_ns1__checkInDoc(struct soap *soap, struct ns1__checkInDoc *p)
{
	if (p)
	{	soap_default_ns1__checkInDoc(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__checkInDoc(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__checkInDoc(struct soap *soap, const char *URL, struct ns1__checkInDoc *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__checkInDoc(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__checkInDoc(struct soap *soap, struct ns1__checkInDoc *p)
{
	if (soap_read_ns1__checkInDoc(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__checkInDocResponse_DEFINED
#define SOAP_TYPE_ns1__checkInDocResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__checkInDocResponse(struct soap*, struct ns1__checkInDocResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__checkInDocResponse(struct soap*, const struct ns1__checkInDocResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__checkInDocResponse(struct soap*, const char*, int, const struct ns1__checkInDocResponse *, const char*);
SOAP_FMAC3 struct ns1__checkInDocResponse * SOAP_FMAC4 soap_in_ns1__checkInDocResponse(struct soap*, const char*, struct ns1__checkInDocResponse *, const char*);
SOAP_FMAC1 struct ns1__checkInDocResponse * SOAP_FMAC2 soap_instantiate_ns1__checkInDocResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__checkInDocResponse * soap_new_ns1__checkInDocResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__checkInDocResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__checkInDocResponse * soap_new_req_ns1__checkInDocResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__checkInDocResponse *_p = soap_new_ns1__checkInDocResponse(soap);
	if (_p)
	{	soap_default_ns1__checkInDocResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__checkInDocResponse * soap_new_set_ns1__checkInDocResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__checkInDocResponse *_p = soap_new_ns1__checkInDocResponse(soap);
	if (_p)
	{	soap_default_ns1__checkInDocResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__checkInDocResponse(struct soap*, const struct ns1__checkInDocResponse *, const char*, const char*);

inline int soap_write_ns1__checkInDocResponse(struct soap *soap, struct ns1__checkInDocResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__checkInDocResponse(soap, p), 0) || soap_put_ns1__checkInDocResponse(soap, p, "ns1:checkInDocResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__checkInDocResponse(struct soap *soap, const char *URL, struct ns1__checkInDocResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__checkInDocResponse(soap, p), 0) || soap_put_ns1__checkInDocResponse(soap, p, "ns1:checkInDocResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__checkInDocResponse(struct soap *soap, const char *URL, struct ns1__checkInDocResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__checkInDocResponse(soap, p), 0) || soap_put_ns1__checkInDocResponse(soap, p, "ns1:checkInDocResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__checkInDocResponse * SOAP_FMAC4 soap_get_ns1__checkInDocResponse(struct soap*, struct ns1__checkInDocResponse *, const char*, const char*);

inline int soap_read_ns1__checkInDocResponse(struct soap *soap, struct ns1__checkInDocResponse *p)
{
	if (p)
	{	soap_default_ns1__checkInDocResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__checkInDocResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__checkInDocResponse(struct soap *soap, const char *URL, struct ns1__checkInDocResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__checkInDocResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__checkInDocResponse(struct soap *soap, struct ns1__checkInDocResponse *p)
{
	if (soap_read_ns1__checkInDocResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__checkInPbom_DEFINED
#define SOAP_TYPE_ns1__checkInPbom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__checkInPbom(struct soap*, struct ns1__checkInPbom *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__checkInPbom(struct soap*, const struct ns1__checkInPbom *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__checkInPbom(struct soap*, const char*, int, const struct ns1__checkInPbom *, const char*);
SOAP_FMAC3 struct ns1__checkInPbom * SOAP_FMAC4 soap_in_ns1__checkInPbom(struct soap*, const char*, struct ns1__checkInPbom *, const char*);
SOAP_FMAC1 struct ns1__checkInPbom * SOAP_FMAC2 soap_instantiate_ns1__checkInPbom(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__checkInPbom * soap_new_ns1__checkInPbom(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__checkInPbom(soap, n, NULL, NULL, NULL);
}

inline struct ns1__checkInPbom * soap_new_req_ns1__checkInPbom(
	struct soap *soap)
{
	struct ns1__checkInPbom *_p = soap_new_ns1__checkInPbom(soap);
	if (_p)
	{	soap_default_ns1__checkInPbom(soap, _p);
	}
	return _p;
}

inline struct ns1__checkInPbom * soap_new_set_ns1__checkInPbom(
	struct soap *soap,
	char *fileName)
{
	struct ns1__checkInPbom *_p = soap_new_ns1__checkInPbom(soap);
	if (_p)
	{	soap_default_ns1__checkInPbom(soap, _p);
		_p->fileName = fileName;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__checkInPbom(struct soap*, const struct ns1__checkInPbom *, const char*, const char*);

inline int soap_write_ns1__checkInPbom(struct soap *soap, struct ns1__checkInPbom const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__checkInPbom(soap, p), 0) || soap_put_ns1__checkInPbom(soap, p, "ns1:checkInPbom", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__checkInPbom(struct soap *soap, const char *URL, struct ns1__checkInPbom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__checkInPbom(soap, p), 0) || soap_put_ns1__checkInPbom(soap, p, "ns1:checkInPbom", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__checkInPbom(struct soap *soap, const char *URL, struct ns1__checkInPbom const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__checkInPbom(soap, p), 0) || soap_put_ns1__checkInPbom(soap, p, "ns1:checkInPbom", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__checkInPbom * SOAP_FMAC4 soap_get_ns1__checkInPbom(struct soap*, struct ns1__checkInPbom *, const char*, const char*);

inline int soap_read_ns1__checkInPbom(struct soap *soap, struct ns1__checkInPbom *p)
{
	if (p)
	{	soap_default_ns1__checkInPbom(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__checkInPbom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__checkInPbom(struct soap *soap, const char *URL, struct ns1__checkInPbom *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__checkInPbom(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__checkInPbom(struct soap *soap, struct ns1__checkInPbom *p)
{
	if (soap_read_ns1__checkInPbom(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__checkInPbomResponse_DEFINED
#define SOAP_TYPE_ns1__checkInPbomResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__checkInPbomResponse(struct soap*, struct ns1__checkInPbomResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__checkInPbomResponse(struct soap*, const struct ns1__checkInPbomResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__checkInPbomResponse(struct soap*, const char*, int, const struct ns1__checkInPbomResponse *, const char*);
SOAP_FMAC3 struct ns1__checkInPbomResponse * SOAP_FMAC4 soap_in_ns1__checkInPbomResponse(struct soap*, const char*, struct ns1__checkInPbomResponse *, const char*);
SOAP_FMAC1 struct ns1__checkInPbomResponse * SOAP_FMAC2 soap_instantiate_ns1__checkInPbomResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__checkInPbomResponse * soap_new_ns1__checkInPbomResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__checkInPbomResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__checkInPbomResponse * soap_new_req_ns1__checkInPbomResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__checkInPbomResponse *_p = soap_new_ns1__checkInPbomResponse(soap);
	if (_p)
	{	soap_default_ns1__checkInPbomResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__checkInPbomResponse * soap_new_set_ns1__checkInPbomResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__checkInPbomResponse *_p = soap_new_ns1__checkInPbomResponse(soap);
	if (_p)
	{	soap_default_ns1__checkInPbomResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__checkInPbomResponse(struct soap*, const struct ns1__checkInPbomResponse *, const char*, const char*);

inline int soap_write_ns1__checkInPbomResponse(struct soap *soap, struct ns1__checkInPbomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__checkInPbomResponse(soap, p), 0) || soap_put_ns1__checkInPbomResponse(soap, p, "ns1:checkInPbomResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__checkInPbomResponse(struct soap *soap, const char *URL, struct ns1__checkInPbomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__checkInPbomResponse(soap, p), 0) || soap_put_ns1__checkInPbomResponse(soap, p, "ns1:checkInPbomResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__checkInPbomResponse(struct soap *soap, const char *URL, struct ns1__checkInPbomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__checkInPbomResponse(soap, p), 0) || soap_put_ns1__checkInPbomResponse(soap, p, "ns1:checkInPbomResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__checkInPbomResponse * SOAP_FMAC4 soap_get_ns1__checkInPbomResponse(struct soap*, struct ns1__checkInPbomResponse *, const char*, const char*);

inline int soap_read_ns1__checkInPbomResponse(struct soap *soap, struct ns1__checkInPbomResponse *p)
{
	if (p)
	{	soap_default_ns1__checkInPbomResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__checkInPbomResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__checkInPbomResponse(struct soap *soap, const char *URL, struct ns1__checkInPbomResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__checkInPbomResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__checkInPbomResponse(struct soap *soap, struct ns1__checkInPbomResponse *p)
{
	if (soap_read_ns1__checkInPbomResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getBom_DEFINED
#define SOAP_TYPE_ns1__getBom_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getBom(struct soap*, struct ns1__getBom *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getBom(struct soap*, const struct ns1__getBom *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getBom(struct soap*, const char*, int, const struct ns1__getBom *, const char*);
SOAP_FMAC3 struct ns1__getBom * SOAP_FMAC4 soap_in_ns1__getBom(struct soap*, const char*, struct ns1__getBom *, const char*);
SOAP_FMAC1 struct ns1__getBom * SOAP_FMAC2 soap_instantiate_ns1__getBom(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getBom * soap_new_ns1__getBom(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getBom(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getBom * soap_new_req_ns1__getBom(
	struct soap *soap)
{
	struct ns1__getBom *_p = soap_new_ns1__getBom(soap);
	if (_p)
	{	soap_default_ns1__getBom(soap, _p);
	}
	return _p;
}

inline struct ns1__getBom * soap_new_set_ns1__getBom(
	struct soap *soap,
	char *operType,
	char *partNumber)
{
	struct ns1__getBom *_p = soap_new_ns1__getBom(soap);
	if (_p)
	{	soap_default_ns1__getBom(soap, _p);
		_p->operType = operType;
		_p->partNumber = partNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getBom(struct soap*, const struct ns1__getBom *, const char*, const char*);

inline int soap_write_ns1__getBom(struct soap *soap, struct ns1__getBom const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getBom(soap, p), 0) || soap_put_ns1__getBom(soap, p, "ns1:getBom", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getBom(struct soap *soap, const char *URL, struct ns1__getBom const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getBom(soap, p), 0) || soap_put_ns1__getBom(soap, p, "ns1:getBom", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getBom(struct soap *soap, const char *URL, struct ns1__getBom const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getBom(soap, p), 0) || soap_put_ns1__getBom(soap, p, "ns1:getBom", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getBom * SOAP_FMAC4 soap_get_ns1__getBom(struct soap*, struct ns1__getBom *, const char*, const char*);

inline int soap_read_ns1__getBom(struct soap *soap, struct ns1__getBom *p)
{
	if (p)
	{	soap_default_ns1__getBom(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getBom(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getBom(struct soap *soap, const char *URL, struct ns1__getBom *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getBom(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getBom(struct soap *soap, struct ns1__getBom *p)
{
	if (soap_read_ns1__getBom(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getBomResponse_DEFINED
#define SOAP_TYPE_ns1__getBomResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getBomResponse(struct soap*, struct ns1__getBomResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getBomResponse(struct soap*, const struct ns1__getBomResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getBomResponse(struct soap*, const char*, int, const struct ns1__getBomResponse *, const char*);
SOAP_FMAC3 struct ns1__getBomResponse * SOAP_FMAC4 soap_in_ns1__getBomResponse(struct soap*, const char*, struct ns1__getBomResponse *, const char*);
SOAP_FMAC1 struct ns1__getBomResponse * SOAP_FMAC2 soap_instantiate_ns1__getBomResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getBomResponse * soap_new_ns1__getBomResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getBomResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getBomResponse * soap_new_req_ns1__getBomResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getBomResponse *_p = soap_new_ns1__getBomResponse(soap);
	if (_p)
	{	soap_default_ns1__getBomResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__getBomResponse * soap_new_set_ns1__getBomResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getBomResponse *_p = soap_new_ns1__getBomResponse(soap);
	if (_p)
	{	soap_default_ns1__getBomResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getBomResponse(struct soap*, const struct ns1__getBomResponse *, const char*, const char*);

inline int soap_write_ns1__getBomResponse(struct soap *soap, struct ns1__getBomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getBomResponse(soap, p), 0) || soap_put_ns1__getBomResponse(soap, p, "ns1:getBomResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getBomResponse(struct soap *soap, const char *URL, struct ns1__getBomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getBomResponse(soap, p), 0) || soap_put_ns1__getBomResponse(soap, p, "ns1:getBomResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getBomResponse(struct soap *soap, const char *URL, struct ns1__getBomResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getBomResponse(soap, p), 0) || soap_put_ns1__getBomResponse(soap, p, "ns1:getBomResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getBomResponse * SOAP_FMAC4 soap_get_ns1__getBomResponse(struct soap*, struct ns1__getBomResponse *, const char*, const char*);

inline int soap_read_ns1__getBomResponse(struct soap *soap, struct ns1__getBomResponse *p)
{
	if (p)
	{	soap_default_ns1__getBomResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getBomResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getBomResponse(struct soap *soap, const char *URL, struct ns1__getBomResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getBomResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getBomResponse(struct soap *soap, struct ns1__getBomResponse *p)
{
	if (soap_read_ns1__getBomResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getPartList_DEFINED
#define SOAP_TYPE_ns1__getPartList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getPartList(struct soap*, struct ns1__getPartList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getPartList(struct soap*, const struct ns1__getPartList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getPartList(struct soap*, const char*, int, const struct ns1__getPartList *, const char*);
SOAP_FMAC3 struct ns1__getPartList * SOAP_FMAC4 soap_in_ns1__getPartList(struct soap*, const char*, struct ns1__getPartList *, const char*);
SOAP_FMAC1 struct ns1__getPartList * SOAP_FMAC2 soap_instantiate_ns1__getPartList(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getPartList * soap_new_ns1__getPartList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getPartList(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getPartList * soap_new_req_ns1__getPartList(
	struct soap *soap)
{
	struct ns1__getPartList *_p = soap_new_ns1__getPartList(soap);
	if (_p)
	{	soap_default_ns1__getPartList(soap, _p);
	}
	return _p;
}

inline struct ns1__getPartList * soap_new_set_ns1__getPartList(
	struct soap *soap,
	char *operType,
	char *partNumber)
{
	struct ns1__getPartList *_p = soap_new_ns1__getPartList(soap);
	if (_p)
	{	soap_default_ns1__getPartList(soap, _p);
		_p->operType = operType;
		_p->partNumber = partNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getPartList(struct soap*, const struct ns1__getPartList *, const char*, const char*);

inline int soap_write_ns1__getPartList(struct soap *soap, struct ns1__getPartList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getPartList(soap, p), 0) || soap_put_ns1__getPartList(soap, p, "ns1:getPartList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getPartList(struct soap *soap, const char *URL, struct ns1__getPartList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getPartList(soap, p), 0) || soap_put_ns1__getPartList(soap, p, "ns1:getPartList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getPartList(struct soap *soap, const char *URL, struct ns1__getPartList const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getPartList(soap, p), 0) || soap_put_ns1__getPartList(soap, p, "ns1:getPartList", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getPartList * SOAP_FMAC4 soap_get_ns1__getPartList(struct soap*, struct ns1__getPartList *, const char*, const char*);

inline int soap_read_ns1__getPartList(struct soap *soap, struct ns1__getPartList *p)
{
	if (p)
	{	soap_default_ns1__getPartList(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getPartList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getPartList(struct soap *soap, const char *URL, struct ns1__getPartList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getPartList(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getPartList(struct soap *soap, struct ns1__getPartList *p)
{
	if (soap_read_ns1__getPartList(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getPartListResponse_DEFINED
#define SOAP_TYPE_ns1__getPartListResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getPartListResponse(struct soap*, struct ns1__getPartListResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getPartListResponse(struct soap*, const struct ns1__getPartListResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getPartListResponse(struct soap*, const char*, int, const struct ns1__getPartListResponse *, const char*);
SOAP_FMAC3 struct ns1__getPartListResponse * SOAP_FMAC4 soap_in_ns1__getPartListResponse(struct soap*, const char*, struct ns1__getPartListResponse *, const char*);
SOAP_FMAC1 struct ns1__getPartListResponse * SOAP_FMAC2 soap_instantiate_ns1__getPartListResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getPartListResponse * soap_new_ns1__getPartListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getPartListResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getPartListResponse * soap_new_req_ns1__getPartListResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getPartListResponse *_p = soap_new_ns1__getPartListResponse(soap);
	if (_p)
	{	soap_default_ns1__getPartListResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__getPartListResponse * soap_new_set_ns1__getPartListResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getPartListResponse *_p = soap_new_ns1__getPartListResponse(soap);
	if (_p)
	{	soap_default_ns1__getPartListResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getPartListResponse(struct soap*, const struct ns1__getPartListResponse *, const char*, const char*);

inline int soap_write_ns1__getPartListResponse(struct soap *soap, struct ns1__getPartListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getPartListResponse(soap, p), 0) || soap_put_ns1__getPartListResponse(soap, p, "ns1:getPartListResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getPartListResponse(struct soap *soap, const char *URL, struct ns1__getPartListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getPartListResponse(soap, p), 0) || soap_put_ns1__getPartListResponse(soap, p, "ns1:getPartListResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getPartListResponse(struct soap *soap, const char *URL, struct ns1__getPartListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getPartListResponse(soap, p), 0) || soap_put_ns1__getPartListResponse(soap, p, "ns1:getPartListResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getPartListResponse * SOAP_FMAC4 soap_get_ns1__getPartListResponse(struct soap*, struct ns1__getPartListResponse *, const char*, const char*);

inline int soap_read_ns1__getPartListResponse(struct soap *soap, struct ns1__getPartListResponse *p)
{
	if (p)
	{	soap_default_ns1__getPartListResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getPartListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getPartListResponse(struct soap *soap, const char *URL, struct ns1__getPartListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getPartListResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getPartListResponse(struct soap *soap, struct ns1__getPartListResponse *p)
{
	if (soap_read_ns1__getPartListResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__checkLogin_DEFINED
#define SOAP_TYPE_ns1__checkLogin_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__checkLogin(struct soap*, struct ns1__checkLogin *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__checkLogin(struct soap*, const struct ns1__checkLogin *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__checkLogin(struct soap*, const char*, int, const struct ns1__checkLogin *, const char*);
SOAP_FMAC3 struct ns1__checkLogin * SOAP_FMAC4 soap_in_ns1__checkLogin(struct soap*, const char*, struct ns1__checkLogin *, const char*);
SOAP_FMAC1 struct ns1__checkLogin * SOAP_FMAC2 soap_instantiate_ns1__checkLogin(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__checkLogin * soap_new_ns1__checkLogin(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__checkLogin(soap, n, NULL, NULL, NULL);
}

inline struct ns1__checkLogin * soap_new_req_ns1__checkLogin(
	struct soap *soap)
{
	struct ns1__checkLogin *_p = soap_new_ns1__checkLogin(soap);
	if (_p)
	{	soap_default_ns1__checkLogin(soap, _p);
	}
	return _p;
}

inline struct ns1__checkLogin * soap_new_set_ns1__checkLogin(
	struct soap *soap)
{
	struct ns1__checkLogin *_p = soap_new_ns1__checkLogin(soap);
	if (_p)
	{	soap_default_ns1__checkLogin(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__checkLogin(struct soap*, const struct ns1__checkLogin *, const char*, const char*);

inline int soap_write_ns1__checkLogin(struct soap *soap, struct ns1__checkLogin const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__checkLogin(soap, p), 0) || soap_put_ns1__checkLogin(soap, p, "ns1:checkLogin", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__checkLogin(struct soap *soap, const char *URL, struct ns1__checkLogin const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__checkLogin(soap, p), 0) || soap_put_ns1__checkLogin(soap, p, "ns1:checkLogin", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__checkLogin(struct soap *soap, const char *URL, struct ns1__checkLogin const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__checkLogin(soap, p), 0) || soap_put_ns1__checkLogin(soap, p, "ns1:checkLogin", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__checkLogin * SOAP_FMAC4 soap_get_ns1__checkLogin(struct soap*, struct ns1__checkLogin *, const char*, const char*);

inline int soap_read_ns1__checkLogin(struct soap *soap, struct ns1__checkLogin *p)
{
	if (p)
	{	soap_default_ns1__checkLogin(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__checkLogin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__checkLogin(struct soap *soap, const char *URL, struct ns1__checkLogin *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__checkLogin(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__checkLogin(struct soap *soap, struct ns1__checkLogin *p)
{
	if (soap_read_ns1__checkLogin(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__checkLoginResponse_DEFINED
#define SOAP_TYPE_ns1__checkLoginResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__checkLoginResponse(struct soap*, struct ns1__checkLoginResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__checkLoginResponse(struct soap*, const struct ns1__checkLoginResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__checkLoginResponse(struct soap*, const char*, int, const struct ns1__checkLoginResponse *, const char*);
SOAP_FMAC3 struct ns1__checkLoginResponse * SOAP_FMAC4 soap_in_ns1__checkLoginResponse(struct soap*, const char*, struct ns1__checkLoginResponse *, const char*);
SOAP_FMAC1 struct ns1__checkLoginResponse * SOAP_FMAC2 soap_instantiate_ns1__checkLoginResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__checkLoginResponse * soap_new_ns1__checkLoginResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__checkLoginResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__checkLoginResponse * soap_new_req_ns1__checkLoginResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__checkLoginResponse *_p = soap_new_ns1__checkLoginResponse(soap);
	if (_p)
	{	soap_default_ns1__checkLoginResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__checkLoginResponse * soap_new_set_ns1__checkLoginResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__checkLoginResponse *_p = soap_new_ns1__checkLoginResponse(soap);
	if (_p)
	{	soap_default_ns1__checkLoginResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__checkLoginResponse(struct soap*, const struct ns1__checkLoginResponse *, const char*, const char*);

inline int soap_write_ns1__checkLoginResponse(struct soap *soap, struct ns1__checkLoginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__checkLoginResponse(soap, p), 0) || soap_put_ns1__checkLoginResponse(soap, p, "ns1:checkLoginResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__checkLoginResponse(struct soap *soap, const char *URL, struct ns1__checkLoginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__checkLoginResponse(soap, p), 0) || soap_put_ns1__checkLoginResponse(soap, p, "ns1:checkLoginResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__checkLoginResponse(struct soap *soap, const char *URL, struct ns1__checkLoginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__checkLoginResponse(soap, p), 0) || soap_put_ns1__checkLoginResponse(soap, p, "ns1:checkLoginResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__checkLoginResponse * SOAP_FMAC4 soap_get_ns1__checkLoginResponse(struct soap*, struct ns1__checkLoginResponse *, const char*, const char*);

inline int soap_read_ns1__checkLoginResponse(struct soap *soap, struct ns1__checkLoginResponse *p)
{
	if (p)
	{	soap_default_ns1__checkLoginResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__checkLoginResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__checkLoginResponse(struct soap *soap, const char *URL, struct ns1__checkLoginResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__checkLoginResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__checkLoginResponse(struct soap *soap, struct ns1__checkLoginResponse *p)
{
	if (soap_read_ns1__checkLoginResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__updateUser_DEFINED
#define SOAP_TYPE_ns1__updateUser_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__updateUser(struct soap*, struct ns1__updateUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__updateUser(struct soap*, const struct ns1__updateUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__updateUser(struct soap*, const char*, int, const struct ns1__updateUser *, const char*);
SOAP_FMAC3 struct ns1__updateUser * SOAP_FMAC4 soap_in_ns1__updateUser(struct soap*, const char*, struct ns1__updateUser *, const char*);
SOAP_FMAC1 struct ns1__updateUser * SOAP_FMAC2 soap_instantiate_ns1__updateUser(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__updateUser * soap_new_ns1__updateUser(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__updateUser(soap, n, NULL, NULL, NULL);
}

inline struct ns1__updateUser * soap_new_req_ns1__updateUser(
	struct soap *soap)
{
	struct ns1__updateUser *_p = soap_new_ns1__updateUser(soap);
	if (_p)
	{	soap_default_ns1__updateUser(soap, _p);
	}
	return _p;
}

inline struct ns1__updateUser * soap_new_set_ns1__updateUser(
	struct soap *soap)
{
	struct ns1__updateUser *_p = soap_new_ns1__updateUser(soap);
	if (_p)
	{	soap_default_ns1__updateUser(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__updateUser(struct soap*, const struct ns1__updateUser *, const char*, const char*);

inline int soap_write_ns1__updateUser(struct soap *soap, struct ns1__updateUser const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__updateUser(soap, p), 0) || soap_put_ns1__updateUser(soap, p, "ns1:updateUser", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__updateUser(struct soap *soap, const char *URL, struct ns1__updateUser const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__updateUser(soap, p), 0) || soap_put_ns1__updateUser(soap, p, "ns1:updateUser", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__updateUser(struct soap *soap, const char *URL, struct ns1__updateUser const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__updateUser(soap, p), 0) || soap_put_ns1__updateUser(soap, p, "ns1:updateUser", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__updateUser * SOAP_FMAC4 soap_get_ns1__updateUser(struct soap*, struct ns1__updateUser *, const char*, const char*);

inline int soap_read_ns1__updateUser(struct soap *soap, struct ns1__updateUser *p)
{
	if (p)
	{	soap_default_ns1__updateUser(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__updateUser(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__updateUser(struct soap *soap, const char *URL, struct ns1__updateUser *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__updateUser(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__updateUser(struct soap *soap, struct ns1__updateUser *p)
{
	if (soap_read_ns1__updateUser(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__updateUserResponse_DEFINED
#define SOAP_TYPE_ns1__updateUserResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__updateUserResponse(struct soap*, struct ns1__updateUserResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__updateUserResponse(struct soap*, const struct ns1__updateUserResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__updateUserResponse(struct soap*, const char*, int, const struct ns1__updateUserResponse *, const char*);
SOAP_FMAC3 struct ns1__updateUserResponse * SOAP_FMAC4 soap_in_ns1__updateUserResponse(struct soap*, const char*, struct ns1__updateUserResponse *, const char*);
SOAP_FMAC1 struct ns1__updateUserResponse * SOAP_FMAC2 soap_instantiate_ns1__updateUserResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__updateUserResponse * soap_new_ns1__updateUserResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__updateUserResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__updateUserResponse * soap_new_req_ns1__updateUserResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__updateUserResponse *_p = soap_new_ns1__updateUserResponse(soap);
	if (_p)
	{	soap_default_ns1__updateUserResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__updateUserResponse * soap_new_set_ns1__updateUserResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__updateUserResponse *_p = soap_new_ns1__updateUserResponse(soap);
	if (_p)
	{	soap_default_ns1__updateUserResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__updateUserResponse(struct soap*, const struct ns1__updateUserResponse *, const char*, const char*);

inline int soap_write_ns1__updateUserResponse(struct soap *soap, struct ns1__updateUserResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__updateUserResponse(soap, p), 0) || soap_put_ns1__updateUserResponse(soap, p, "ns1:updateUserResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__updateUserResponse(struct soap *soap, const char *URL, struct ns1__updateUserResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__updateUserResponse(soap, p), 0) || soap_put_ns1__updateUserResponse(soap, p, "ns1:updateUserResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__updateUserResponse(struct soap *soap, const char *URL, struct ns1__updateUserResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__updateUserResponse(soap, p), 0) || soap_put_ns1__updateUserResponse(soap, p, "ns1:updateUserResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__updateUserResponse * SOAP_FMAC4 soap_get_ns1__updateUserResponse(struct soap*, struct ns1__updateUserResponse *, const char*, const char*);

inline int soap_read_ns1__updateUserResponse(struct soap *soap, struct ns1__updateUserResponse *p)
{
	if (p)
	{	soap_default_ns1__updateUserResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__updateUserResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__updateUserResponse(struct soap *soap, const char *URL, struct ns1__updateUserResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__updateUserResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__updateUserResponse(struct soap *soap, struct ns1__updateUserResponse *p)
{
	if (soap_read_ns1__updateUserResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__pendingWork_DEFINED
#define SOAP_TYPE_ns1__pendingWork_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__pendingWork(struct soap*, struct ns1__pendingWork *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__pendingWork(struct soap*, const struct ns1__pendingWork *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__pendingWork(struct soap*, const char*, int, const struct ns1__pendingWork *, const char*);
SOAP_FMAC3 struct ns1__pendingWork * SOAP_FMAC4 soap_in_ns1__pendingWork(struct soap*, const char*, struct ns1__pendingWork *, const char*);
SOAP_FMAC1 struct ns1__pendingWork * SOAP_FMAC2 soap_instantiate_ns1__pendingWork(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__pendingWork * soap_new_ns1__pendingWork(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__pendingWork(soap, n, NULL, NULL, NULL);
}

inline struct ns1__pendingWork * soap_new_req_ns1__pendingWork(
	struct soap *soap)
{
	struct ns1__pendingWork *_p = soap_new_ns1__pendingWork(soap);
	if (_p)
	{	soap_default_ns1__pendingWork(soap, _p);
	}
	return _p;
}

inline struct ns1__pendingWork * soap_new_set_ns1__pendingWork(
	struct soap *soap)
{
	struct ns1__pendingWork *_p = soap_new_ns1__pendingWork(soap);
	if (_p)
	{	soap_default_ns1__pendingWork(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__pendingWork(struct soap*, const struct ns1__pendingWork *, const char*, const char*);

inline int soap_write_ns1__pendingWork(struct soap *soap, struct ns1__pendingWork const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__pendingWork(soap, p), 0) || soap_put_ns1__pendingWork(soap, p, "ns1:pendingWork", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__pendingWork(struct soap *soap, const char *URL, struct ns1__pendingWork const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__pendingWork(soap, p), 0) || soap_put_ns1__pendingWork(soap, p, "ns1:pendingWork", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__pendingWork(struct soap *soap, const char *URL, struct ns1__pendingWork const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__pendingWork(soap, p), 0) || soap_put_ns1__pendingWork(soap, p, "ns1:pendingWork", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__pendingWork * SOAP_FMAC4 soap_get_ns1__pendingWork(struct soap*, struct ns1__pendingWork *, const char*, const char*);

inline int soap_read_ns1__pendingWork(struct soap *soap, struct ns1__pendingWork *p)
{
	if (p)
	{	soap_default_ns1__pendingWork(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__pendingWork(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__pendingWork(struct soap *soap, const char *URL, struct ns1__pendingWork *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__pendingWork(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__pendingWork(struct soap *soap, struct ns1__pendingWork *p)
{
	if (soap_read_ns1__pendingWork(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__pendingWorkResponse_DEFINED
#define SOAP_TYPE_ns1__pendingWorkResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__pendingWorkResponse(struct soap*, struct ns1__pendingWorkResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__pendingWorkResponse(struct soap*, const struct ns1__pendingWorkResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__pendingWorkResponse(struct soap*, const char*, int, const struct ns1__pendingWorkResponse *, const char*);
SOAP_FMAC3 struct ns1__pendingWorkResponse * SOAP_FMAC4 soap_in_ns1__pendingWorkResponse(struct soap*, const char*, struct ns1__pendingWorkResponse *, const char*);
SOAP_FMAC1 struct ns1__pendingWorkResponse * SOAP_FMAC2 soap_instantiate_ns1__pendingWorkResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__pendingWorkResponse * soap_new_ns1__pendingWorkResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__pendingWorkResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__pendingWorkResponse * soap_new_req_ns1__pendingWorkResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__pendingWorkResponse *_p = soap_new_ns1__pendingWorkResponse(soap);
	if (_p)
	{	soap_default_ns1__pendingWorkResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__pendingWorkResponse * soap_new_set_ns1__pendingWorkResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__pendingWorkResponse *_p = soap_new_ns1__pendingWorkResponse(soap);
	if (_p)
	{	soap_default_ns1__pendingWorkResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__pendingWorkResponse(struct soap*, const struct ns1__pendingWorkResponse *, const char*, const char*);

inline int soap_write_ns1__pendingWorkResponse(struct soap *soap, struct ns1__pendingWorkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__pendingWorkResponse(soap, p), 0) || soap_put_ns1__pendingWorkResponse(soap, p, "ns1:pendingWorkResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__pendingWorkResponse(struct soap *soap, const char *URL, struct ns1__pendingWorkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__pendingWorkResponse(soap, p), 0) || soap_put_ns1__pendingWorkResponse(soap, p, "ns1:pendingWorkResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__pendingWorkResponse(struct soap *soap, const char *URL, struct ns1__pendingWorkResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__pendingWorkResponse(soap, p), 0) || soap_put_ns1__pendingWorkResponse(soap, p, "ns1:pendingWorkResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__pendingWorkResponse * SOAP_FMAC4 soap_get_ns1__pendingWorkResponse(struct soap*, struct ns1__pendingWorkResponse *, const char*, const char*);

inline int soap_read_ns1__pendingWorkResponse(struct soap *soap, struct ns1__pendingWorkResponse *p)
{
	if (p)
	{	soap_default_ns1__pendingWorkResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__pendingWorkResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__pendingWorkResponse(struct soap *soap, const char *URL, struct ns1__pendingWorkResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__pendingWorkResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__pendingWorkResponse(struct soap *soap, struct ns1__pendingWorkResponse *p)
{
	if (soap_read_ns1__pendingWorkResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getordercreatorbynumber_DEFINED
#define SOAP_TYPE_ns1__getordercreatorbynumber_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getordercreatorbynumber(struct soap*, struct ns1__getordercreatorbynumber *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getordercreatorbynumber(struct soap*, const struct ns1__getordercreatorbynumber *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getordercreatorbynumber(struct soap*, const char*, int, const struct ns1__getordercreatorbynumber *, const char*);
SOAP_FMAC3 struct ns1__getordercreatorbynumber * SOAP_FMAC4 soap_in_ns1__getordercreatorbynumber(struct soap*, const char*, struct ns1__getordercreatorbynumber *, const char*);
SOAP_FMAC1 struct ns1__getordercreatorbynumber * SOAP_FMAC2 soap_instantiate_ns1__getordercreatorbynumber(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getordercreatorbynumber * soap_new_ns1__getordercreatorbynumber(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getordercreatorbynumber(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getordercreatorbynumber * soap_new_req_ns1__getordercreatorbynumber(
	struct soap *soap)
{
	struct ns1__getordercreatorbynumber *_p = soap_new_ns1__getordercreatorbynumber(soap);
	if (_p)
	{	soap_default_ns1__getordercreatorbynumber(soap, _p);
	}
	return _p;
}

inline struct ns1__getordercreatorbynumber * soap_new_set_ns1__getordercreatorbynumber(
	struct soap *soap)
{
	struct ns1__getordercreatorbynumber *_p = soap_new_ns1__getordercreatorbynumber(soap);
	if (_p)
	{	soap_default_ns1__getordercreatorbynumber(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getordercreatorbynumber(struct soap*, const struct ns1__getordercreatorbynumber *, const char*, const char*);

inline int soap_write_ns1__getordercreatorbynumber(struct soap *soap, struct ns1__getordercreatorbynumber const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getordercreatorbynumber(soap, p), 0) || soap_put_ns1__getordercreatorbynumber(soap, p, "ns1:getordercreatorbynumber", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getordercreatorbynumber(struct soap *soap, const char *URL, struct ns1__getordercreatorbynumber const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getordercreatorbynumber(soap, p), 0) || soap_put_ns1__getordercreatorbynumber(soap, p, "ns1:getordercreatorbynumber", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getordercreatorbynumber(struct soap *soap, const char *URL, struct ns1__getordercreatorbynumber const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getordercreatorbynumber(soap, p), 0) || soap_put_ns1__getordercreatorbynumber(soap, p, "ns1:getordercreatorbynumber", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getordercreatorbynumber * SOAP_FMAC4 soap_get_ns1__getordercreatorbynumber(struct soap*, struct ns1__getordercreatorbynumber *, const char*, const char*);

inline int soap_read_ns1__getordercreatorbynumber(struct soap *soap, struct ns1__getordercreatorbynumber *p)
{
	if (p)
	{	soap_default_ns1__getordercreatorbynumber(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getordercreatorbynumber(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getordercreatorbynumber(struct soap *soap, const char *URL, struct ns1__getordercreatorbynumber *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getordercreatorbynumber(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getordercreatorbynumber(struct soap *soap, struct ns1__getordercreatorbynumber *p)
{
	if (soap_read_ns1__getordercreatorbynumber(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getordercreatorbynumberResponse_DEFINED
#define SOAP_TYPE_ns1__getordercreatorbynumberResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getordercreatorbynumberResponse(struct soap*, struct ns1__getordercreatorbynumberResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getordercreatorbynumberResponse(struct soap*, const struct ns1__getordercreatorbynumberResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getordercreatorbynumberResponse(struct soap*, const char*, int, const struct ns1__getordercreatorbynumberResponse *, const char*);
SOAP_FMAC3 struct ns1__getordercreatorbynumberResponse * SOAP_FMAC4 soap_in_ns1__getordercreatorbynumberResponse(struct soap*, const char*, struct ns1__getordercreatorbynumberResponse *, const char*);
SOAP_FMAC1 struct ns1__getordercreatorbynumberResponse * SOAP_FMAC2 soap_instantiate_ns1__getordercreatorbynumberResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getordercreatorbynumberResponse * soap_new_ns1__getordercreatorbynumberResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getordercreatorbynumberResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getordercreatorbynumberResponse * soap_new_req_ns1__getordercreatorbynumberResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getordercreatorbynumberResponse *_p = soap_new_ns1__getordercreatorbynumberResponse(soap);
	if (_p)
	{	soap_default_ns1__getordercreatorbynumberResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__getordercreatorbynumberResponse * soap_new_set_ns1__getordercreatorbynumberResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getordercreatorbynumberResponse *_p = soap_new_ns1__getordercreatorbynumberResponse(soap);
	if (_p)
	{	soap_default_ns1__getordercreatorbynumberResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getordercreatorbynumberResponse(struct soap*, const struct ns1__getordercreatorbynumberResponse *, const char*, const char*);

inline int soap_write_ns1__getordercreatorbynumberResponse(struct soap *soap, struct ns1__getordercreatorbynumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getordercreatorbynumberResponse(soap, p), 0) || soap_put_ns1__getordercreatorbynumberResponse(soap, p, "ns1:getordercreatorbynumberResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getordercreatorbynumberResponse(struct soap *soap, const char *URL, struct ns1__getordercreatorbynumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getordercreatorbynumberResponse(soap, p), 0) || soap_put_ns1__getordercreatorbynumberResponse(soap, p, "ns1:getordercreatorbynumberResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getordercreatorbynumberResponse(struct soap *soap, const char *URL, struct ns1__getordercreatorbynumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getordercreatorbynumberResponse(soap, p), 0) || soap_put_ns1__getordercreatorbynumberResponse(soap, p, "ns1:getordercreatorbynumberResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getordercreatorbynumberResponse * SOAP_FMAC4 soap_get_ns1__getordercreatorbynumberResponse(struct soap*, struct ns1__getordercreatorbynumberResponse *, const char*, const char*);

inline int soap_read_ns1__getordercreatorbynumberResponse(struct soap *soap, struct ns1__getordercreatorbynumberResponse *p)
{
	if (p)
	{	soap_default_ns1__getordercreatorbynumberResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getordercreatorbynumberResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getordercreatorbynumberResponse(struct soap *soap, const char *URL, struct ns1__getordercreatorbynumberResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getordercreatorbynumberResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getordercreatorbynumberResponse(struct soap *soap, struct ns1__getordercreatorbynumberResponse *p)
{
	if (soap_read_ns1__getordercreatorbynumberResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__unCheckOut_DEFINED
#define SOAP_TYPE_ns1__unCheckOut_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__unCheckOut(struct soap*, struct ns1__unCheckOut *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__unCheckOut(struct soap*, const struct ns1__unCheckOut *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__unCheckOut(struct soap*, const char*, int, const struct ns1__unCheckOut *, const char*);
SOAP_FMAC3 struct ns1__unCheckOut * SOAP_FMAC4 soap_in_ns1__unCheckOut(struct soap*, const char*, struct ns1__unCheckOut *, const char*);
SOAP_FMAC1 struct ns1__unCheckOut * SOAP_FMAC2 soap_instantiate_ns1__unCheckOut(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__unCheckOut * soap_new_ns1__unCheckOut(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__unCheckOut(soap, n, NULL, NULL, NULL);
}

inline struct ns1__unCheckOut * soap_new_req_ns1__unCheckOut(
	struct soap *soap)
{
	struct ns1__unCheckOut *_p = soap_new_ns1__unCheckOut(soap);
	if (_p)
	{	soap_default_ns1__unCheckOut(soap, _p);
	}
	return _p;
}

inline struct ns1__unCheckOut * soap_new_set_ns1__unCheckOut(
	struct soap *soap,
	char *filePath)
{
	struct ns1__unCheckOut *_p = soap_new_ns1__unCheckOut(soap);
	if (_p)
	{	soap_default_ns1__unCheckOut(soap, _p);
		_p->filePath = filePath;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__unCheckOut(struct soap*, const struct ns1__unCheckOut *, const char*, const char*);

inline int soap_write_ns1__unCheckOut(struct soap *soap, struct ns1__unCheckOut const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__unCheckOut(soap, p), 0) || soap_put_ns1__unCheckOut(soap, p, "ns1:unCheckOut", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__unCheckOut(struct soap *soap, const char *URL, struct ns1__unCheckOut const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__unCheckOut(soap, p), 0) || soap_put_ns1__unCheckOut(soap, p, "ns1:unCheckOut", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__unCheckOut(struct soap *soap, const char *URL, struct ns1__unCheckOut const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__unCheckOut(soap, p), 0) || soap_put_ns1__unCheckOut(soap, p, "ns1:unCheckOut", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__unCheckOut * SOAP_FMAC4 soap_get_ns1__unCheckOut(struct soap*, struct ns1__unCheckOut *, const char*, const char*);

inline int soap_read_ns1__unCheckOut(struct soap *soap, struct ns1__unCheckOut *p)
{
	if (p)
	{	soap_default_ns1__unCheckOut(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__unCheckOut(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__unCheckOut(struct soap *soap, const char *URL, struct ns1__unCheckOut *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__unCheckOut(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__unCheckOut(struct soap *soap, struct ns1__unCheckOut *p)
{
	if (soap_read_ns1__unCheckOut(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__unCheckOutResponse_DEFINED
#define SOAP_TYPE_ns1__unCheckOutResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__unCheckOutResponse(struct soap*, struct ns1__unCheckOutResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__unCheckOutResponse(struct soap*, const struct ns1__unCheckOutResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__unCheckOutResponse(struct soap*, const char*, int, const struct ns1__unCheckOutResponse *, const char*);
SOAP_FMAC3 struct ns1__unCheckOutResponse * SOAP_FMAC4 soap_in_ns1__unCheckOutResponse(struct soap*, const char*, struct ns1__unCheckOutResponse *, const char*);
SOAP_FMAC1 struct ns1__unCheckOutResponse * SOAP_FMAC2 soap_instantiate_ns1__unCheckOutResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__unCheckOutResponse * soap_new_ns1__unCheckOutResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__unCheckOutResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__unCheckOutResponse * soap_new_req_ns1__unCheckOutResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__unCheckOutResponse *_p = soap_new_ns1__unCheckOutResponse(soap);
	if (_p)
	{	soap_default_ns1__unCheckOutResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__unCheckOutResponse * soap_new_set_ns1__unCheckOutResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__unCheckOutResponse *_p = soap_new_ns1__unCheckOutResponse(soap);
	if (_p)
	{	soap_default_ns1__unCheckOutResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__unCheckOutResponse(struct soap*, const struct ns1__unCheckOutResponse *, const char*, const char*);

inline int soap_write_ns1__unCheckOutResponse(struct soap *soap, struct ns1__unCheckOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__unCheckOutResponse(soap, p), 0) || soap_put_ns1__unCheckOutResponse(soap, p, "ns1:unCheckOutResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__unCheckOutResponse(struct soap *soap, const char *URL, struct ns1__unCheckOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__unCheckOutResponse(soap, p), 0) || soap_put_ns1__unCheckOutResponse(soap, p, "ns1:unCheckOutResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__unCheckOutResponse(struct soap *soap, const char *URL, struct ns1__unCheckOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__unCheckOutResponse(soap, p), 0) || soap_put_ns1__unCheckOutResponse(soap, p, "ns1:unCheckOutResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__unCheckOutResponse * SOAP_FMAC4 soap_get_ns1__unCheckOutResponse(struct soap*, struct ns1__unCheckOutResponse *, const char*, const char*);

inline int soap_read_ns1__unCheckOutResponse(struct soap *soap, struct ns1__unCheckOutResponse *p)
{
	if (p)
	{	soap_default_ns1__unCheckOutResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__unCheckOutResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__unCheckOutResponse(struct soap *soap, const char *URL, struct ns1__unCheckOutResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__unCheckOutResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__unCheckOutResponse(struct soap *soap, struct ns1__unCheckOutResponse *p)
{
	if (soap_read_ns1__unCheckOutResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__callProduct_DEFINED
#define SOAP_TYPE_ns1__callProduct_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__callProduct(struct soap*, struct ns1__callProduct *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__callProduct(struct soap*, const struct ns1__callProduct *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__callProduct(struct soap*, const char*, int, const struct ns1__callProduct *, const char*);
SOAP_FMAC3 struct ns1__callProduct * SOAP_FMAC4 soap_in_ns1__callProduct(struct soap*, const char*, struct ns1__callProduct *, const char*);
SOAP_FMAC1 struct ns1__callProduct * SOAP_FMAC2 soap_instantiate_ns1__callProduct(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__callProduct * soap_new_ns1__callProduct(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__callProduct(soap, n, NULL, NULL, NULL);
}

inline struct ns1__callProduct * soap_new_req_ns1__callProduct(
	struct soap *soap)
{
	struct ns1__callProduct *_p = soap_new_ns1__callProduct(soap);
	if (_p)
	{	soap_default_ns1__callProduct(soap, _p);
	}
	return _p;
}

inline struct ns1__callProduct * soap_new_set_ns1__callProduct(
	struct soap *soap)
{
	struct ns1__callProduct *_p = soap_new_ns1__callProduct(soap);
	if (_p)
	{	soap_default_ns1__callProduct(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__callProduct(struct soap*, const struct ns1__callProduct *, const char*, const char*);

inline int soap_write_ns1__callProduct(struct soap *soap, struct ns1__callProduct const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__callProduct(soap, p), 0) || soap_put_ns1__callProduct(soap, p, "ns1:callProduct", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__callProduct(struct soap *soap, const char *URL, struct ns1__callProduct const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__callProduct(soap, p), 0) || soap_put_ns1__callProduct(soap, p, "ns1:callProduct", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__callProduct(struct soap *soap, const char *URL, struct ns1__callProduct const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__callProduct(soap, p), 0) || soap_put_ns1__callProduct(soap, p, "ns1:callProduct", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__callProduct * SOAP_FMAC4 soap_get_ns1__callProduct(struct soap*, struct ns1__callProduct *, const char*, const char*);

inline int soap_read_ns1__callProduct(struct soap *soap, struct ns1__callProduct *p)
{
	if (p)
	{	soap_default_ns1__callProduct(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__callProduct(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__callProduct(struct soap *soap, const char *URL, struct ns1__callProduct *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__callProduct(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__callProduct(struct soap *soap, struct ns1__callProduct *p)
{
	if (soap_read_ns1__callProduct(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__callProductResponse_DEFINED
#define SOAP_TYPE_ns1__callProductResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__callProductResponse(struct soap*, struct ns1__callProductResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__callProductResponse(struct soap*, const struct ns1__callProductResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__callProductResponse(struct soap*, const char*, int, const struct ns1__callProductResponse *, const char*);
SOAP_FMAC3 struct ns1__callProductResponse * SOAP_FMAC4 soap_in_ns1__callProductResponse(struct soap*, const char*, struct ns1__callProductResponse *, const char*);
SOAP_FMAC1 struct ns1__callProductResponse * SOAP_FMAC2 soap_instantiate_ns1__callProductResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__callProductResponse * soap_new_ns1__callProductResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__callProductResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__callProductResponse * soap_new_req_ns1__callProductResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__callProductResponse *_p = soap_new_ns1__callProductResponse(soap);
	if (_p)
	{	soap_default_ns1__callProductResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__callProductResponse * soap_new_set_ns1__callProductResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__callProductResponse *_p = soap_new_ns1__callProductResponse(soap);
	if (_p)
	{	soap_default_ns1__callProductResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__callProductResponse(struct soap*, const struct ns1__callProductResponse *, const char*, const char*);

inline int soap_write_ns1__callProductResponse(struct soap *soap, struct ns1__callProductResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__callProductResponse(soap, p), 0) || soap_put_ns1__callProductResponse(soap, p, "ns1:callProductResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__callProductResponse(struct soap *soap, const char *URL, struct ns1__callProductResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__callProductResponse(soap, p), 0) || soap_put_ns1__callProductResponse(soap, p, "ns1:callProductResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__callProductResponse(struct soap *soap, const char *URL, struct ns1__callProductResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__callProductResponse(soap, p), 0) || soap_put_ns1__callProductResponse(soap, p, "ns1:callProductResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__callProductResponse * SOAP_FMAC4 soap_get_ns1__callProductResponse(struct soap*, struct ns1__callProductResponse *, const char*, const char*);

inline int soap_read_ns1__callProductResponse(struct soap *soap, struct ns1__callProductResponse *p)
{
	if (p)
	{	soap_default_ns1__callProductResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__callProductResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__callProductResponse(struct soap *soap, const char *URL, struct ns1__callProductResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__callProductResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__callProductResponse(struct soap *soap, struct ns1__callProductResponse *p)
{
	if (soap_read_ns1__callProductResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__callCheckIn_DEFINED
#define SOAP_TYPE_ns1__callCheckIn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__callCheckIn(struct soap*, struct ns1__callCheckIn *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__callCheckIn(struct soap*, const struct ns1__callCheckIn *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__callCheckIn(struct soap*, const char*, int, const struct ns1__callCheckIn *, const char*);
SOAP_FMAC3 struct ns1__callCheckIn * SOAP_FMAC4 soap_in_ns1__callCheckIn(struct soap*, const char*, struct ns1__callCheckIn *, const char*);
SOAP_FMAC1 struct ns1__callCheckIn * SOAP_FMAC2 soap_instantiate_ns1__callCheckIn(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__callCheckIn * soap_new_ns1__callCheckIn(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__callCheckIn(soap, n, NULL, NULL, NULL);
}

inline struct ns1__callCheckIn * soap_new_req_ns1__callCheckIn(
	struct soap *soap)
{
	struct ns1__callCheckIn *_p = soap_new_ns1__callCheckIn(soap);
	if (_p)
	{	soap_default_ns1__callCheckIn(soap, _p);
	}
	return _p;
}

inline struct ns1__callCheckIn * soap_new_set_ns1__callCheckIn(
	struct soap *soap,
	char *filePath)
{
	struct ns1__callCheckIn *_p = soap_new_ns1__callCheckIn(soap);
	if (_p)
	{	soap_default_ns1__callCheckIn(soap, _p);
		_p->filePath = filePath;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__callCheckIn(struct soap*, const struct ns1__callCheckIn *, const char*, const char*);

inline int soap_write_ns1__callCheckIn(struct soap *soap, struct ns1__callCheckIn const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__callCheckIn(soap, p), 0) || soap_put_ns1__callCheckIn(soap, p, "ns1:callCheckIn", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__callCheckIn(struct soap *soap, const char *URL, struct ns1__callCheckIn const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__callCheckIn(soap, p), 0) || soap_put_ns1__callCheckIn(soap, p, "ns1:callCheckIn", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__callCheckIn(struct soap *soap, const char *URL, struct ns1__callCheckIn const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__callCheckIn(soap, p), 0) || soap_put_ns1__callCheckIn(soap, p, "ns1:callCheckIn", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__callCheckIn * SOAP_FMAC4 soap_get_ns1__callCheckIn(struct soap*, struct ns1__callCheckIn *, const char*, const char*);

inline int soap_read_ns1__callCheckIn(struct soap *soap, struct ns1__callCheckIn *p)
{
	if (p)
	{	soap_default_ns1__callCheckIn(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__callCheckIn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__callCheckIn(struct soap *soap, const char *URL, struct ns1__callCheckIn *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__callCheckIn(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__callCheckIn(struct soap *soap, struct ns1__callCheckIn *p)
{
	if (soap_read_ns1__callCheckIn(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__callCheckInResponse_DEFINED
#define SOAP_TYPE_ns1__callCheckInResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__callCheckInResponse(struct soap*, struct ns1__callCheckInResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__callCheckInResponse(struct soap*, const struct ns1__callCheckInResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__callCheckInResponse(struct soap*, const char*, int, const struct ns1__callCheckInResponse *, const char*);
SOAP_FMAC3 struct ns1__callCheckInResponse * SOAP_FMAC4 soap_in_ns1__callCheckInResponse(struct soap*, const char*, struct ns1__callCheckInResponse *, const char*);
SOAP_FMAC1 struct ns1__callCheckInResponse * SOAP_FMAC2 soap_instantiate_ns1__callCheckInResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__callCheckInResponse * soap_new_ns1__callCheckInResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__callCheckInResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__callCheckInResponse * soap_new_req_ns1__callCheckInResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__callCheckInResponse *_p = soap_new_ns1__callCheckInResponse(soap);
	if (_p)
	{	soap_default_ns1__callCheckInResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__callCheckInResponse * soap_new_set_ns1__callCheckInResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__callCheckInResponse *_p = soap_new_ns1__callCheckInResponse(soap);
	if (_p)
	{	soap_default_ns1__callCheckInResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__callCheckInResponse(struct soap*, const struct ns1__callCheckInResponse *, const char*, const char*);

inline int soap_write_ns1__callCheckInResponse(struct soap *soap, struct ns1__callCheckInResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__callCheckInResponse(soap, p), 0) || soap_put_ns1__callCheckInResponse(soap, p, "ns1:callCheckInResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__callCheckInResponse(struct soap *soap, const char *URL, struct ns1__callCheckInResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__callCheckInResponse(soap, p), 0) || soap_put_ns1__callCheckInResponse(soap, p, "ns1:callCheckInResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__callCheckInResponse(struct soap *soap, const char *URL, struct ns1__callCheckInResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__callCheckInResponse(soap, p), 0) || soap_put_ns1__callCheckInResponse(soap, p, "ns1:callCheckInResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__callCheckInResponse * SOAP_FMAC4 soap_get_ns1__callCheckInResponse(struct soap*, struct ns1__callCheckInResponse *, const char*, const char*);

inline int soap_read_ns1__callCheckInResponse(struct soap *soap, struct ns1__callCheckInResponse *p)
{
	if (p)
	{	soap_default_ns1__callCheckInResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__callCheckInResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__callCheckInResponse(struct soap *soap, const char *URL, struct ns1__callCheckInResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__callCheckInResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__callCheckInResponse(struct soap *soap, struct ns1__callCheckInResponse *p)
{
	if (soap_read_ns1__callCheckInResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__callCheckOut_DEFINED
#define SOAP_TYPE_ns1__callCheckOut_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__callCheckOut(struct soap*, struct ns1__callCheckOut *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__callCheckOut(struct soap*, const struct ns1__callCheckOut *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__callCheckOut(struct soap*, const char*, int, const struct ns1__callCheckOut *, const char*);
SOAP_FMAC3 struct ns1__callCheckOut * SOAP_FMAC4 soap_in_ns1__callCheckOut(struct soap*, const char*, struct ns1__callCheckOut *, const char*);
SOAP_FMAC1 struct ns1__callCheckOut * SOAP_FMAC2 soap_instantiate_ns1__callCheckOut(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__callCheckOut * soap_new_ns1__callCheckOut(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__callCheckOut(soap, n, NULL, NULL, NULL);
}

inline struct ns1__callCheckOut * soap_new_req_ns1__callCheckOut(
	struct soap *soap)
{
	struct ns1__callCheckOut *_p = soap_new_ns1__callCheckOut(soap);
	if (_p)
	{	soap_default_ns1__callCheckOut(soap, _p);
	}
	return _p;
}

inline struct ns1__callCheckOut * soap_new_set_ns1__callCheckOut(
	struct soap *soap,
	char *partNumber)
{
	struct ns1__callCheckOut *_p = soap_new_ns1__callCheckOut(soap);
	if (_p)
	{	soap_default_ns1__callCheckOut(soap, _p);
		_p->partNumber = partNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__callCheckOut(struct soap*, const struct ns1__callCheckOut *, const char*, const char*);

inline int soap_write_ns1__callCheckOut(struct soap *soap, struct ns1__callCheckOut const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__callCheckOut(soap, p), 0) || soap_put_ns1__callCheckOut(soap, p, "ns1:callCheckOut", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__callCheckOut(struct soap *soap, const char *URL, struct ns1__callCheckOut const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__callCheckOut(soap, p), 0) || soap_put_ns1__callCheckOut(soap, p, "ns1:callCheckOut", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__callCheckOut(struct soap *soap, const char *URL, struct ns1__callCheckOut const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__callCheckOut(soap, p), 0) || soap_put_ns1__callCheckOut(soap, p, "ns1:callCheckOut", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__callCheckOut * SOAP_FMAC4 soap_get_ns1__callCheckOut(struct soap*, struct ns1__callCheckOut *, const char*, const char*);

inline int soap_read_ns1__callCheckOut(struct soap *soap, struct ns1__callCheckOut *p)
{
	if (p)
	{	soap_default_ns1__callCheckOut(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__callCheckOut(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__callCheckOut(struct soap *soap, const char *URL, struct ns1__callCheckOut *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__callCheckOut(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__callCheckOut(struct soap *soap, struct ns1__callCheckOut *p)
{
	if (soap_read_ns1__callCheckOut(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__callCheckOutResponse_DEFINED
#define SOAP_TYPE_ns1__callCheckOutResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__callCheckOutResponse(struct soap*, struct ns1__callCheckOutResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__callCheckOutResponse(struct soap*, const struct ns1__callCheckOutResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__callCheckOutResponse(struct soap*, const char*, int, const struct ns1__callCheckOutResponse *, const char*);
SOAP_FMAC3 struct ns1__callCheckOutResponse * SOAP_FMAC4 soap_in_ns1__callCheckOutResponse(struct soap*, const char*, struct ns1__callCheckOutResponse *, const char*);
SOAP_FMAC1 struct ns1__callCheckOutResponse * SOAP_FMAC2 soap_instantiate_ns1__callCheckOutResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__callCheckOutResponse * soap_new_ns1__callCheckOutResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__callCheckOutResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__callCheckOutResponse * soap_new_req_ns1__callCheckOutResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__callCheckOutResponse *_p = soap_new_ns1__callCheckOutResponse(soap);
	if (_p)
	{	soap_default_ns1__callCheckOutResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__callCheckOutResponse * soap_new_set_ns1__callCheckOutResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__callCheckOutResponse *_p = soap_new_ns1__callCheckOutResponse(soap);
	if (_p)
	{	soap_default_ns1__callCheckOutResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__callCheckOutResponse(struct soap*, const struct ns1__callCheckOutResponse *, const char*, const char*);

inline int soap_write_ns1__callCheckOutResponse(struct soap *soap, struct ns1__callCheckOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__callCheckOutResponse(soap, p), 0) || soap_put_ns1__callCheckOutResponse(soap, p, "ns1:callCheckOutResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__callCheckOutResponse(struct soap *soap, const char *URL, struct ns1__callCheckOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__callCheckOutResponse(soap, p), 0) || soap_put_ns1__callCheckOutResponse(soap, p, "ns1:callCheckOutResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__callCheckOutResponse(struct soap *soap, const char *URL, struct ns1__callCheckOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__callCheckOutResponse(soap, p), 0) || soap_put_ns1__callCheckOutResponse(soap, p, "ns1:callCheckOutResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__callCheckOutResponse * SOAP_FMAC4 soap_get_ns1__callCheckOutResponse(struct soap*, struct ns1__callCheckOutResponse *, const char*, const char*);

inline int soap_read_ns1__callCheckOutResponse(struct soap *soap, struct ns1__callCheckOutResponse *p)
{
	if (p)
	{	soap_default_ns1__callCheckOutResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__callCheckOutResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__callCheckOutResponse(struct soap *soap, const char *URL, struct ns1__callCheckOutResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__callCheckOutResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__callCheckOutResponse(struct soap *soap, struct ns1__callCheckOutResponse *p)
{
	if (soap_read_ns1__callCheckOutResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__callCheckUser_DEFINED
#define SOAP_TYPE_ns1__callCheckUser_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__callCheckUser(struct soap*, struct ns1__callCheckUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__callCheckUser(struct soap*, const struct ns1__callCheckUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__callCheckUser(struct soap*, const char*, int, const struct ns1__callCheckUser *, const char*);
SOAP_FMAC3 struct ns1__callCheckUser * SOAP_FMAC4 soap_in_ns1__callCheckUser(struct soap*, const char*, struct ns1__callCheckUser *, const char*);
SOAP_FMAC1 struct ns1__callCheckUser * SOAP_FMAC2 soap_instantiate_ns1__callCheckUser(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__callCheckUser * soap_new_ns1__callCheckUser(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__callCheckUser(soap, n, NULL, NULL, NULL);
}

inline struct ns1__callCheckUser * soap_new_req_ns1__callCheckUser(
	struct soap *soap)
{
	struct ns1__callCheckUser *_p = soap_new_ns1__callCheckUser(soap);
	if (_p)
	{	soap_default_ns1__callCheckUser(soap, _p);
	}
	return _p;
}

inline struct ns1__callCheckUser * soap_new_set_ns1__callCheckUser(
	struct soap *soap,
	char *filePath)
{
	struct ns1__callCheckUser *_p = soap_new_ns1__callCheckUser(soap);
	if (_p)
	{	soap_default_ns1__callCheckUser(soap, _p);
		_p->filePath = filePath;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__callCheckUser(struct soap*, const struct ns1__callCheckUser *, const char*, const char*);

inline int soap_write_ns1__callCheckUser(struct soap *soap, struct ns1__callCheckUser const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__callCheckUser(soap, p), 0) || soap_put_ns1__callCheckUser(soap, p, "ns1:callCheckUser", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__callCheckUser(struct soap *soap, const char *URL, struct ns1__callCheckUser const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__callCheckUser(soap, p), 0) || soap_put_ns1__callCheckUser(soap, p, "ns1:callCheckUser", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__callCheckUser(struct soap *soap, const char *URL, struct ns1__callCheckUser const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__callCheckUser(soap, p), 0) || soap_put_ns1__callCheckUser(soap, p, "ns1:callCheckUser", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__callCheckUser * SOAP_FMAC4 soap_get_ns1__callCheckUser(struct soap*, struct ns1__callCheckUser *, const char*, const char*);

inline int soap_read_ns1__callCheckUser(struct soap *soap, struct ns1__callCheckUser *p)
{
	if (p)
	{	soap_default_ns1__callCheckUser(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__callCheckUser(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__callCheckUser(struct soap *soap, const char *URL, struct ns1__callCheckUser *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__callCheckUser(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__callCheckUser(struct soap *soap, struct ns1__callCheckUser *p)
{
	if (soap_read_ns1__callCheckUser(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__callCheckUserResponse_DEFINED
#define SOAP_TYPE_ns1__callCheckUserResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__callCheckUserResponse(struct soap*, struct ns1__callCheckUserResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__callCheckUserResponse(struct soap*, const struct ns1__callCheckUserResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__callCheckUserResponse(struct soap*, const char*, int, const struct ns1__callCheckUserResponse *, const char*);
SOAP_FMAC3 struct ns1__callCheckUserResponse * SOAP_FMAC4 soap_in_ns1__callCheckUserResponse(struct soap*, const char*, struct ns1__callCheckUserResponse *, const char*);
SOAP_FMAC1 struct ns1__callCheckUserResponse * SOAP_FMAC2 soap_instantiate_ns1__callCheckUserResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__callCheckUserResponse * soap_new_ns1__callCheckUserResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__callCheckUserResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__callCheckUserResponse * soap_new_req_ns1__callCheckUserResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__callCheckUserResponse *_p = soap_new_ns1__callCheckUserResponse(soap);
	if (_p)
	{	soap_default_ns1__callCheckUserResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__callCheckUserResponse * soap_new_set_ns1__callCheckUserResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__callCheckUserResponse *_p = soap_new_ns1__callCheckUserResponse(soap);
	if (_p)
	{	soap_default_ns1__callCheckUserResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__callCheckUserResponse(struct soap*, const struct ns1__callCheckUserResponse *, const char*, const char*);

inline int soap_write_ns1__callCheckUserResponse(struct soap *soap, struct ns1__callCheckUserResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__callCheckUserResponse(soap, p), 0) || soap_put_ns1__callCheckUserResponse(soap, p, "ns1:callCheckUserResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__callCheckUserResponse(struct soap *soap, const char *URL, struct ns1__callCheckUserResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__callCheckUserResponse(soap, p), 0) || soap_put_ns1__callCheckUserResponse(soap, p, "ns1:callCheckUserResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__callCheckUserResponse(struct soap *soap, const char *URL, struct ns1__callCheckUserResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__callCheckUserResponse(soap, p), 0) || soap_put_ns1__callCheckUserResponse(soap, p, "ns1:callCheckUserResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__callCheckUserResponse * SOAP_FMAC4 soap_get_ns1__callCheckUserResponse(struct soap*, struct ns1__callCheckUserResponse *, const char*, const char*);

inline int soap_read_ns1__callCheckUserResponse(struct soap *soap, struct ns1__callCheckUserResponse *p)
{
	if (p)
	{	soap_default_ns1__callCheckUserResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__callCheckUserResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__callCheckUserResponse(struct soap *soap, const char *URL, struct ns1__callCheckUserResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__callCheckUserResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__callCheckUserResponse(struct soap *soap, struct ns1__callCheckUserResponse *p)
{
	if (soap_read_ns1__callCheckUserResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__callSearch_DEFINED
#define SOAP_TYPE_ns1__callSearch_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__callSearch(struct soap*, struct ns1__callSearch *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__callSearch(struct soap*, const struct ns1__callSearch *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__callSearch(struct soap*, const char*, int, const struct ns1__callSearch *, const char*);
SOAP_FMAC3 struct ns1__callSearch * SOAP_FMAC4 soap_in_ns1__callSearch(struct soap*, const char*, struct ns1__callSearch *, const char*);
SOAP_FMAC1 struct ns1__callSearch * SOAP_FMAC2 soap_instantiate_ns1__callSearch(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__callSearch * soap_new_ns1__callSearch(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__callSearch(soap, n, NULL, NULL, NULL);
}

inline struct ns1__callSearch * soap_new_req_ns1__callSearch(
	struct soap *soap)
{
	struct ns1__callSearch *_p = soap_new_ns1__callSearch(soap);
	if (_p)
	{	soap_default_ns1__callSearch(soap, _p);
	}
	return _p;
}

inline struct ns1__callSearch * soap_new_set_ns1__callSearch(
	struct soap *soap,
	char *partNumber)
{
	struct ns1__callSearch *_p = soap_new_ns1__callSearch(soap);
	if (_p)
	{	soap_default_ns1__callSearch(soap, _p);
		_p->partNumber = partNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__callSearch(struct soap*, const struct ns1__callSearch *, const char*, const char*);

inline int soap_write_ns1__callSearch(struct soap *soap, struct ns1__callSearch const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__callSearch(soap, p), 0) || soap_put_ns1__callSearch(soap, p, "ns1:callSearch", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__callSearch(struct soap *soap, const char *URL, struct ns1__callSearch const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__callSearch(soap, p), 0) || soap_put_ns1__callSearch(soap, p, "ns1:callSearch", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__callSearch(struct soap *soap, const char *URL, struct ns1__callSearch const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__callSearch(soap, p), 0) || soap_put_ns1__callSearch(soap, p, "ns1:callSearch", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__callSearch * SOAP_FMAC4 soap_get_ns1__callSearch(struct soap*, struct ns1__callSearch *, const char*, const char*);

inline int soap_read_ns1__callSearch(struct soap *soap, struct ns1__callSearch *p)
{
	if (p)
	{	soap_default_ns1__callSearch(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__callSearch(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__callSearch(struct soap *soap, const char *URL, struct ns1__callSearch *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__callSearch(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__callSearch(struct soap *soap, struct ns1__callSearch *p)
{
	if (soap_read_ns1__callSearch(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__callSearchResponse_DEFINED
#define SOAP_TYPE_ns1__callSearchResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__callSearchResponse(struct soap*, struct ns1__callSearchResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__callSearchResponse(struct soap*, const struct ns1__callSearchResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__callSearchResponse(struct soap*, const char*, int, const struct ns1__callSearchResponse *, const char*);
SOAP_FMAC3 struct ns1__callSearchResponse * SOAP_FMAC4 soap_in_ns1__callSearchResponse(struct soap*, const char*, struct ns1__callSearchResponse *, const char*);
SOAP_FMAC1 struct ns1__callSearchResponse * SOAP_FMAC2 soap_instantiate_ns1__callSearchResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__callSearchResponse * soap_new_ns1__callSearchResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__callSearchResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__callSearchResponse * soap_new_req_ns1__callSearchResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__callSearchResponse *_p = soap_new_ns1__callSearchResponse(soap);
	if (_p)
	{	soap_default_ns1__callSearchResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__callSearchResponse * soap_new_set_ns1__callSearchResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__callSearchResponse *_p = soap_new_ns1__callSearchResponse(soap);
	if (_p)
	{	soap_default_ns1__callSearchResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__callSearchResponse(struct soap*, const struct ns1__callSearchResponse *, const char*, const char*);

inline int soap_write_ns1__callSearchResponse(struct soap *soap, struct ns1__callSearchResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__callSearchResponse(soap, p), 0) || soap_put_ns1__callSearchResponse(soap, p, "ns1:callSearchResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__callSearchResponse(struct soap *soap, const char *URL, struct ns1__callSearchResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__callSearchResponse(soap, p), 0) || soap_put_ns1__callSearchResponse(soap, p, "ns1:callSearchResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__callSearchResponse(struct soap *soap, const char *URL, struct ns1__callSearchResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__callSearchResponse(soap, p), 0) || soap_put_ns1__callSearchResponse(soap, p, "ns1:callSearchResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__callSearchResponse * SOAP_FMAC4 soap_get_ns1__callSearchResponse(struct soap*, struct ns1__callSearchResponse *, const char*, const char*);

inline int soap_read_ns1__callSearchResponse(struct soap *soap, struct ns1__callSearchResponse *p)
{
	if (p)
	{	soap_default_ns1__callSearchResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__callSearchResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__callSearchResponse(struct soap *soap, const char *URL, struct ns1__callSearchResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__callSearchResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__callSearchResponse(struct soap *soap, struct ns1__callSearchResponse *p)
{
	if (soap_read_ns1__callSearchResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getFolder_DEFINED
#define SOAP_TYPE_ns1__getFolder_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getFolder(struct soap*, struct ns1__getFolder *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getFolder(struct soap*, const struct ns1__getFolder *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFolder(struct soap*, const char*, int, const struct ns1__getFolder *, const char*);
SOAP_FMAC3 struct ns1__getFolder * SOAP_FMAC4 soap_in_ns1__getFolder(struct soap*, const char*, struct ns1__getFolder *, const char*);
SOAP_FMAC1 struct ns1__getFolder * SOAP_FMAC2 soap_instantiate_ns1__getFolder(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getFolder * soap_new_ns1__getFolder(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getFolder(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getFolder * soap_new_req_ns1__getFolder(
	struct soap *soap)
{
	struct ns1__getFolder *_p = soap_new_ns1__getFolder(soap);
	if (_p)
	{	soap_default_ns1__getFolder(soap, _p);
	}
	return _p;
}

inline struct ns1__getFolder * soap_new_set_ns1__getFolder(
	struct soap *soap,
	char *param)
{
	struct ns1__getFolder *_p = soap_new_ns1__getFolder(soap);
	if (_p)
	{	soap_default_ns1__getFolder(soap, _p);
		_p->param = param;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getFolder(struct soap*, const struct ns1__getFolder *, const char*, const char*);

inline int soap_write_ns1__getFolder(struct soap *soap, struct ns1__getFolder const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getFolder(soap, p), 0) || soap_put_ns1__getFolder(soap, p, "ns1:getFolder", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getFolder(struct soap *soap, const char *URL, struct ns1__getFolder const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getFolder(soap, p), 0) || soap_put_ns1__getFolder(soap, p, "ns1:getFolder", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getFolder(struct soap *soap, const char *URL, struct ns1__getFolder const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getFolder(soap, p), 0) || soap_put_ns1__getFolder(soap, p, "ns1:getFolder", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getFolder * SOAP_FMAC4 soap_get_ns1__getFolder(struct soap*, struct ns1__getFolder *, const char*, const char*);

inline int soap_read_ns1__getFolder(struct soap *soap, struct ns1__getFolder *p)
{
	if (p)
	{	soap_default_ns1__getFolder(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getFolder(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getFolder(struct soap *soap, const char *URL, struct ns1__getFolder *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getFolder(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getFolder(struct soap *soap, struct ns1__getFolder *p)
{
	if (soap_read_ns1__getFolder(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getFolderResponse_DEFINED
#define SOAP_TYPE_ns1__getFolderResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getFolderResponse(struct soap*, struct ns1__getFolderResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getFolderResponse(struct soap*, const struct ns1__getFolderResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFolderResponse(struct soap*, const char*, int, const struct ns1__getFolderResponse *, const char*);
SOAP_FMAC3 struct ns1__getFolderResponse * SOAP_FMAC4 soap_in_ns1__getFolderResponse(struct soap*, const char*, struct ns1__getFolderResponse *, const char*);
SOAP_FMAC1 struct ns1__getFolderResponse * SOAP_FMAC2 soap_instantiate_ns1__getFolderResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getFolderResponse * soap_new_ns1__getFolderResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getFolderResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getFolderResponse * soap_new_req_ns1__getFolderResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getFolderResponse *_p = soap_new_ns1__getFolderResponse(soap);
	if (_p)
	{	soap_default_ns1__getFolderResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__getFolderResponse * soap_new_set_ns1__getFolderResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getFolderResponse *_p = soap_new_ns1__getFolderResponse(soap);
	if (_p)
	{	soap_default_ns1__getFolderResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getFolderResponse(struct soap*, const struct ns1__getFolderResponse *, const char*, const char*);

inline int soap_write_ns1__getFolderResponse(struct soap *soap, struct ns1__getFolderResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getFolderResponse(soap, p), 0) || soap_put_ns1__getFolderResponse(soap, p, "ns1:getFolderResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getFolderResponse(struct soap *soap, const char *URL, struct ns1__getFolderResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getFolderResponse(soap, p), 0) || soap_put_ns1__getFolderResponse(soap, p, "ns1:getFolderResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getFolderResponse(struct soap *soap, const char *URL, struct ns1__getFolderResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getFolderResponse(soap, p), 0) || soap_put_ns1__getFolderResponse(soap, p, "ns1:getFolderResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getFolderResponse * SOAP_FMAC4 soap_get_ns1__getFolderResponse(struct soap*, struct ns1__getFolderResponse *, const char*, const char*);

inline int soap_read_ns1__getFolderResponse(struct soap *soap, struct ns1__getFolderResponse *p)
{
	if (p)
	{	soap_default_ns1__getFolderResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getFolderResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getFolderResponse(struct soap *soap, const char *URL, struct ns1__getFolderResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getFolderResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getFolderResponse(struct soap *soap, struct ns1__getFolderResponse *p)
{
	if (soap_read_ns1__getFolderResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getZip_DEFINED
#define SOAP_TYPE_ns1__getZip_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getZip(struct soap*, struct ns1__getZip *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getZip(struct soap*, const struct ns1__getZip *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getZip(struct soap*, const char*, int, const struct ns1__getZip *, const char*);
SOAP_FMAC3 struct ns1__getZip * SOAP_FMAC4 soap_in_ns1__getZip(struct soap*, const char*, struct ns1__getZip *, const char*);
SOAP_FMAC1 struct ns1__getZip * SOAP_FMAC2 soap_instantiate_ns1__getZip(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getZip * soap_new_ns1__getZip(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getZip(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getZip * soap_new_req_ns1__getZip(
	struct soap *soap)
{
	struct ns1__getZip *_p = soap_new_ns1__getZip(soap);
	if (_p)
	{	soap_default_ns1__getZip(soap, _p);
	}
	return _p;
}

inline struct ns1__getZip * soap_new_set_ns1__getZip(
	struct soap *soap,
	char *partNumber)
{
	struct ns1__getZip *_p = soap_new_ns1__getZip(soap);
	if (_p)
	{	soap_default_ns1__getZip(soap, _p);
		_p->partNumber = partNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getZip(struct soap*, const struct ns1__getZip *, const char*, const char*);

inline int soap_write_ns1__getZip(struct soap *soap, struct ns1__getZip const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getZip(soap, p), 0) || soap_put_ns1__getZip(soap, p, "ns1:getZip", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getZip(struct soap *soap, const char *URL, struct ns1__getZip const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getZip(soap, p), 0) || soap_put_ns1__getZip(soap, p, "ns1:getZip", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getZip(struct soap *soap, const char *URL, struct ns1__getZip const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getZip(soap, p), 0) || soap_put_ns1__getZip(soap, p, "ns1:getZip", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getZip * SOAP_FMAC4 soap_get_ns1__getZip(struct soap*, struct ns1__getZip *, const char*, const char*);

inline int soap_read_ns1__getZip(struct soap *soap, struct ns1__getZip *p)
{
	if (p)
	{	soap_default_ns1__getZip(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getZip(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getZip(struct soap *soap, const char *URL, struct ns1__getZip *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getZip(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getZip(struct soap *soap, struct ns1__getZip *p)
{
	if (soap_read_ns1__getZip(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getZipResponse_DEFINED
#define SOAP_TYPE_ns1__getZipResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getZipResponse(struct soap*, struct ns1__getZipResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getZipResponse(struct soap*, const struct ns1__getZipResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getZipResponse(struct soap*, const char*, int, const struct ns1__getZipResponse *, const char*);
SOAP_FMAC3 struct ns1__getZipResponse * SOAP_FMAC4 soap_in_ns1__getZipResponse(struct soap*, const char*, struct ns1__getZipResponse *, const char*);
SOAP_FMAC1 struct ns1__getZipResponse * SOAP_FMAC2 soap_instantiate_ns1__getZipResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getZipResponse * soap_new_ns1__getZipResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getZipResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getZipResponse * soap_new_req_ns1__getZipResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getZipResponse *_p = soap_new_ns1__getZipResponse(soap);
	if (_p)
	{	soap_default_ns1__getZipResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__getZipResponse * soap_new_set_ns1__getZipResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getZipResponse *_p = soap_new_ns1__getZipResponse(soap);
	if (_p)
	{	soap_default_ns1__getZipResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getZipResponse(struct soap*, const struct ns1__getZipResponse *, const char*, const char*);

inline int soap_write_ns1__getZipResponse(struct soap *soap, struct ns1__getZipResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getZipResponse(soap, p), 0) || soap_put_ns1__getZipResponse(soap, p, "ns1:getZipResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getZipResponse(struct soap *soap, const char *URL, struct ns1__getZipResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getZipResponse(soap, p), 0) || soap_put_ns1__getZipResponse(soap, p, "ns1:getZipResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getZipResponse(struct soap *soap, const char *URL, struct ns1__getZipResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getZipResponse(soap, p), 0) || soap_put_ns1__getZipResponse(soap, p, "ns1:getZipResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getZipResponse * SOAP_FMAC4 soap_get_ns1__getZipResponse(struct soap*, struct ns1__getZipResponse *, const char*, const char*);

inline int soap_read_ns1__getZipResponse(struct soap *soap, struct ns1__getZipResponse *p)
{
	if (p)
	{	soap_default_ns1__getZipResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getZipResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getZipResponse(struct soap *soap, const char *URL, struct ns1__getZipResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getZipResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getZipResponse(struct soap *soap, struct ns1__getZipResponse *p)
{
	if (soap_read_ns1__getZipResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__reviseAndCheckOut_DEFINED
#define SOAP_TYPE_ns1__reviseAndCheckOut_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__reviseAndCheckOut(struct soap*, struct ns1__reviseAndCheckOut *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__reviseAndCheckOut(struct soap*, const struct ns1__reviseAndCheckOut *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__reviseAndCheckOut(struct soap*, const char*, int, const struct ns1__reviseAndCheckOut *, const char*);
SOAP_FMAC3 struct ns1__reviseAndCheckOut * SOAP_FMAC4 soap_in_ns1__reviseAndCheckOut(struct soap*, const char*, struct ns1__reviseAndCheckOut *, const char*);
SOAP_FMAC1 struct ns1__reviseAndCheckOut * SOAP_FMAC2 soap_instantiate_ns1__reviseAndCheckOut(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__reviseAndCheckOut * soap_new_ns1__reviseAndCheckOut(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__reviseAndCheckOut(soap, n, NULL, NULL, NULL);
}

inline struct ns1__reviseAndCheckOut * soap_new_req_ns1__reviseAndCheckOut(
	struct soap *soap)
{
	struct ns1__reviseAndCheckOut *_p = soap_new_ns1__reviseAndCheckOut(soap);
	if (_p)
	{	soap_default_ns1__reviseAndCheckOut(soap, _p);
	}
	return _p;
}

inline struct ns1__reviseAndCheckOut * soap_new_set_ns1__reviseAndCheckOut(
	struct soap *soap,
	char *partNumber)
{
	struct ns1__reviseAndCheckOut *_p = soap_new_ns1__reviseAndCheckOut(soap);
	if (_p)
	{	soap_default_ns1__reviseAndCheckOut(soap, _p);
		_p->partNumber = partNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__reviseAndCheckOut(struct soap*, const struct ns1__reviseAndCheckOut *, const char*, const char*);

inline int soap_write_ns1__reviseAndCheckOut(struct soap *soap, struct ns1__reviseAndCheckOut const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__reviseAndCheckOut(soap, p), 0) || soap_put_ns1__reviseAndCheckOut(soap, p, "ns1:reviseAndCheckOut", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__reviseAndCheckOut(struct soap *soap, const char *URL, struct ns1__reviseAndCheckOut const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__reviseAndCheckOut(soap, p), 0) || soap_put_ns1__reviseAndCheckOut(soap, p, "ns1:reviseAndCheckOut", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__reviseAndCheckOut(struct soap *soap, const char *URL, struct ns1__reviseAndCheckOut const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__reviseAndCheckOut(soap, p), 0) || soap_put_ns1__reviseAndCheckOut(soap, p, "ns1:reviseAndCheckOut", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__reviseAndCheckOut * SOAP_FMAC4 soap_get_ns1__reviseAndCheckOut(struct soap*, struct ns1__reviseAndCheckOut *, const char*, const char*);

inline int soap_read_ns1__reviseAndCheckOut(struct soap *soap, struct ns1__reviseAndCheckOut *p)
{
	if (p)
	{	soap_default_ns1__reviseAndCheckOut(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__reviseAndCheckOut(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__reviseAndCheckOut(struct soap *soap, const char *URL, struct ns1__reviseAndCheckOut *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__reviseAndCheckOut(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__reviseAndCheckOut(struct soap *soap, struct ns1__reviseAndCheckOut *p)
{
	if (soap_read_ns1__reviseAndCheckOut(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__reviseAndCheckOutResponse_DEFINED
#define SOAP_TYPE_ns1__reviseAndCheckOutResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__reviseAndCheckOutResponse(struct soap*, struct ns1__reviseAndCheckOutResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__reviseAndCheckOutResponse(struct soap*, const struct ns1__reviseAndCheckOutResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__reviseAndCheckOutResponse(struct soap*, const char*, int, const struct ns1__reviseAndCheckOutResponse *, const char*);
SOAP_FMAC3 struct ns1__reviseAndCheckOutResponse * SOAP_FMAC4 soap_in_ns1__reviseAndCheckOutResponse(struct soap*, const char*, struct ns1__reviseAndCheckOutResponse *, const char*);
SOAP_FMAC1 struct ns1__reviseAndCheckOutResponse * SOAP_FMAC2 soap_instantiate_ns1__reviseAndCheckOutResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__reviseAndCheckOutResponse * soap_new_ns1__reviseAndCheckOutResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__reviseAndCheckOutResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__reviseAndCheckOutResponse * soap_new_req_ns1__reviseAndCheckOutResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__reviseAndCheckOutResponse *_p = soap_new_ns1__reviseAndCheckOutResponse(soap);
	if (_p)
	{	soap_default_ns1__reviseAndCheckOutResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__reviseAndCheckOutResponse * soap_new_set_ns1__reviseAndCheckOutResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__reviseAndCheckOutResponse *_p = soap_new_ns1__reviseAndCheckOutResponse(soap);
	if (_p)
	{	soap_default_ns1__reviseAndCheckOutResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__reviseAndCheckOutResponse(struct soap*, const struct ns1__reviseAndCheckOutResponse *, const char*, const char*);

inline int soap_write_ns1__reviseAndCheckOutResponse(struct soap *soap, struct ns1__reviseAndCheckOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__reviseAndCheckOutResponse(soap, p), 0) || soap_put_ns1__reviseAndCheckOutResponse(soap, p, "ns1:reviseAndCheckOutResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__reviseAndCheckOutResponse(struct soap *soap, const char *URL, struct ns1__reviseAndCheckOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__reviseAndCheckOutResponse(soap, p), 0) || soap_put_ns1__reviseAndCheckOutResponse(soap, p, "ns1:reviseAndCheckOutResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__reviseAndCheckOutResponse(struct soap *soap, const char *URL, struct ns1__reviseAndCheckOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__reviseAndCheckOutResponse(soap, p), 0) || soap_put_ns1__reviseAndCheckOutResponse(soap, p, "ns1:reviseAndCheckOutResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__reviseAndCheckOutResponse * SOAP_FMAC4 soap_get_ns1__reviseAndCheckOutResponse(struct soap*, struct ns1__reviseAndCheckOutResponse *, const char*, const char*);

inline int soap_read_ns1__reviseAndCheckOutResponse(struct soap *soap, struct ns1__reviseAndCheckOutResponse *p)
{
	if (p)
	{	soap_default_ns1__reviseAndCheckOutResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__reviseAndCheckOutResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__reviseAndCheckOutResponse(struct soap *soap, const char *URL, struct ns1__reviseAndCheckOutResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__reviseAndCheckOutResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__reviseAndCheckOutResponse(struct soap *soap, struct ns1__reviseAndCheckOutResponse *p)
{
	if (soap_read_ns1__reviseAndCheckOutResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__tipicalCraftSelector_DEFINED
#define SOAP_TYPE_ns1__tipicalCraftSelector_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__tipicalCraftSelector(struct soap*, struct ns1__tipicalCraftSelector *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__tipicalCraftSelector(struct soap*, const struct ns1__tipicalCraftSelector *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__tipicalCraftSelector(struct soap*, const char*, int, const struct ns1__tipicalCraftSelector *, const char*);
SOAP_FMAC3 struct ns1__tipicalCraftSelector * SOAP_FMAC4 soap_in_ns1__tipicalCraftSelector(struct soap*, const char*, struct ns1__tipicalCraftSelector *, const char*);
SOAP_FMAC1 struct ns1__tipicalCraftSelector * SOAP_FMAC2 soap_instantiate_ns1__tipicalCraftSelector(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__tipicalCraftSelector * soap_new_ns1__tipicalCraftSelector(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__tipicalCraftSelector(soap, n, NULL, NULL, NULL);
}

inline struct ns1__tipicalCraftSelector * soap_new_req_ns1__tipicalCraftSelector(
	struct soap *soap)
{
	struct ns1__tipicalCraftSelector *_p = soap_new_ns1__tipicalCraftSelector(soap);
	if (_p)
	{	soap_default_ns1__tipicalCraftSelector(soap, _p);
	}
	return _p;
}

inline struct ns1__tipicalCraftSelector * soap_new_set_ns1__tipicalCraftSelector(
	struct soap *soap)
{
	struct ns1__tipicalCraftSelector *_p = soap_new_ns1__tipicalCraftSelector(soap);
	if (_p)
	{	soap_default_ns1__tipicalCraftSelector(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__tipicalCraftSelector(struct soap*, const struct ns1__tipicalCraftSelector *, const char*, const char*);

inline int soap_write_ns1__tipicalCraftSelector(struct soap *soap, struct ns1__tipicalCraftSelector const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__tipicalCraftSelector(soap, p), 0) || soap_put_ns1__tipicalCraftSelector(soap, p, "ns1:tipicalCraftSelector", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__tipicalCraftSelector(struct soap *soap, const char *URL, struct ns1__tipicalCraftSelector const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__tipicalCraftSelector(soap, p), 0) || soap_put_ns1__tipicalCraftSelector(soap, p, "ns1:tipicalCraftSelector", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__tipicalCraftSelector(struct soap *soap, const char *URL, struct ns1__tipicalCraftSelector const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__tipicalCraftSelector(soap, p), 0) || soap_put_ns1__tipicalCraftSelector(soap, p, "ns1:tipicalCraftSelector", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__tipicalCraftSelector * SOAP_FMAC4 soap_get_ns1__tipicalCraftSelector(struct soap*, struct ns1__tipicalCraftSelector *, const char*, const char*);

inline int soap_read_ns1__tipicalCraftSelector(struct soap *soap, struct ns1__tipicalCraftSelector *p)
{
	if (p)
	{	soap_default_ns1__tipicalCraftSelector(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__tipicalCraftSelector(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__tipicalCraftSelector(struct soap *soap, const char *URL, struct ns1__tipicalCraftSelector *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__tipicalCraftSelector(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__tipicalCraftSelector(struct soap *soap, struct ns1__tipicalCraftSelector *p)
{
	if (soap_read_ns1__tipicalCraftSelector(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__tipicalCraftSelectorResponse_DEFINED
#define SOAP_TYPE_ns1__tipicalCraftSelectorResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__tipicalCraftSelectorResponse(struct soap*, struct ns1__tipicalCraftSelectorResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__tipicalCraftSelectorResponse(struct soap*, const struct ns1__tipicalCraftSelectorResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__tipicalCraftSelectorResponse(struct soap*, const char*, int, const struct ns1__tipicalCraftSelectorResponse *, const char*);
SOAP_FMAC3 struct ns1__tipicalCraftSelectorResponse * SOAP_FMAC4 soap_in_ns1__tipicalCraftSelectorResponse(struct soap*, const char*, struct ns1__tipicalCraftSelectorResponse *, const char*);
SOAP_FMAC1 struct ns1__tipicalCraftSelectorResponse * SOAP_FMAC2 soap_instantiate_ns1__tipicalCraftSelectorResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__tipicalCraftSelectorResponse * soap_new_ns1__tipicalCraftSelectorResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__tipicalCraftSelectorResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__tipicalCraftSelectorResponse * soap_new_req_ns1__tipicalCraftSelectorResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__tipicalCraftSelectorResponse *_p = soap_new_ns1__tipicalCraftSelectorResponse(soap);
	if (_p)
	{	soap_default_ns1__tipicalCraftSelectorResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__tipicalCraftSelectorResponse * soap_new_set_ns1__tipicalCraftSelectorResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__tipicalCraftSelectorResponse *_p = soap_new_ns1__tipicalCraftSelectorResponse(soap);
	if (_p)
	{	soap_default_ns1__tipicalCraftSelectorResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__tipicalCraftSelectorResponse(struct soap*, const struct ns1__tipicalCraftSelectorResponse *, const char*, const char*);

inline int soap_write_ns1__tipicalCraftSelectorResponse(struct soap *soap, struct ns1__tipicalCraftSelectorResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__tipicalCraftSelectorResponse(soap, p), 0) || soap_put_ns1__tipicalCraftSelectorResponse(soap, p, "ns1:tipicalCraftSelectorResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__tipicalCraftSelectorResponse(struct soap *soap, const char *URL, struct ns1__tipicalCraftSelectorResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__tipicalCraftSelectorResponse(soap, p), 0) || soap_put_ns1__tipicalCraftSelectorResponse(soap, p, "ns1:tipicalCraftSelectorResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__tipicalCraftSelectorResponse(struct soap *soap, const char *URL, struct ns1__tipicalCraftSelectorResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__tipicalCraftSelectorResponse(soap, p), 0) || soap_put_ns1__tipicalCraftSelectorResponse(soap, p, "ns1:tipicalCraftSelectorResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__tipicalCraftSelectorResponse * SOAP_FMAC4 soap_get_ns1__tipicalCraftSelectorResponse(struct soap*, struct ns1__tipicalCraftSelectorResponse *, const char*, const char*);

inline int soap_read_ns1__tipicalCraftSelectorResponse(struct soap *soap, struct ns1__tipicalCraftSelectorResponse *p)
{
	if (p)
	{	soap_default_ns1__tipicalCraftSelectorResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__tipicalCraftSelectorResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__tipicalCraftSelectorResponse(struct soap *soap, const char *URL, struct ns1__tipicalCraftSelectorResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__tipicalCraftSelectorResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__tipicalCraftSelectorResponse(struct soap *soap, struct ns1__tipicalCraftSelectorResponse *p)
{
	if (soap_read_ns1__tipicalCraftSelectorResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getorderbynumber_DEFINED
#define SOAP_TYPE_ns1__getorderbynumber_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getorderbynumber(struct soap*, struct ns1__getorderbynumber *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getorderbynumber(struct soap*, const struct ns1__getorderbynumber *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getorderbynumber(struct soap*, const char*, int, const struct ns1__getorderbynumber *, const char*);
SOAP_FMAC3 struct ns1__getorderbynumber * SOAP_FMAC4 soap_in_ns1__getorderbynumber(struct soap*, const char*, struct ns1__getorderbynumber *, const char*);
SOAP_FMAC1 struct ns1__getorderbynumber * SOAP_FMAC2 soap_instantiate_ns1__getorderbynumber(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getorderbynumber * soap_new_ns1__getorderbynumber(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getorderbynumber(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getorderbynumber * soap_new_req_ns1__getorderbynumber(
	struct soap *soap)
{
	struct ns1__getorderbynumber *_p = soap_new_ns1__getorderbynumber(soap);
	if (_p)
	{	soap_default_ns1__getorderbynumber(soap, _p);
	}
	return _p;
}

inline struct ns1__getorderbynumber * soap_new_set_ns1__getorderbynumber(
	struct soap *soap)
{
	struct ns1__getorderbynumber *_p = soap_new_ns1__getorderbynumber(soap);
	if (_p)
	{	soap_default_ns1__getorderbynumber(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getorderbynumber(struct soap*, const struct ns1__getorderbynumber *, const char*, const char*);

inline int soap_write_ns1__getorderbynumber(struct soap *soap, struct ns1__getorderbynumber const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getorderbynumber(soap, p), 0) || soap_put_ns1__getorderbynumber(soap, p, "ns1:getorderbynumber", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getorderbynumber(struct soap *soap, const char *URL, struct ns1__getorderbynumber const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getorderbynumber(soap, p), 0) || soap_put_ns1__getorderbynumber(soap, p, "ns1:getorderbynumber", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getorderbynumber(struct soap *soap, const char *URL, struct ns1__getorderbynumber const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getorderbynumber(soap, p), 0) || soap_put_ns1__getorderbynumber(soap, p, "ns1:getorderbynumber", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getorderbynumber * SOAP_FMAC4 soap_get_ns1__getorderbynumber(struct soap*, struct ns1__getorderbynumber *, const char*, const char*);

inline int soap_read_ns1__getorderbynumber(struct soap *soap, struct ns1__getorderbynumber *p)
{
	if (p)
	{	soap_default_ns1__getorderbynumber(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getorderbynumber(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getorderbynumber(struct soap *soap, const char *URL, struct ns1__getorderbynumber *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getorderbynumber(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getorderbynumber(struct soap *soap, struct ns1__getorderbynumber *p)
{
	if (soap_read_ns1__getorderbynumber(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getorderbynumberResponse_DEFINED
#define SOAP_TYPE_ns1__getorderbynumberResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getorderbynumberResponse(struct soap*, struct ns1__getorderbynumberResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getorderbynumberResponse(struct soap*, const struct ns1__getorderbynumberResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getorderbynumberResponse(struct soap*, const char*, int, const struct ns1__getorderbynumberResponse *, const char*);
SOAP_FMAC3 struct ns1__getorderbynumberResponse * SOAP_FMAC4 soap_in_ns1__getorderbynumberResponse(struct soap*, const char*, struct ns1__getorderbynumberResponse *, const char*);
SOAP_FMAC1 struct ns1__getorderbynumberResponse * SOAP_FMAC2 soap_instantiate_ns1__getorderbynumberResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getorderbynumberResponse * soap_new_ns1__getorderbynumberResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getorderbynumberResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getorderbynumberResponse * soap_new_req_ns1__getorderbynumberResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getorderbynumberResponse *_p = soap_new_ns1__getorderbynumberResponse(soap);
	if (_p)
	{	soap_default_ns1__getorderbynumberResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__getorderbynumberResponse * soap_new_set_ns1__getorderbynumberResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getorderbynumberResponse *_p = soap_new_ns1__getorderbynumberResponse(soap);
	if (_p)
	{	soap_default_ns1__getorderbynumberResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getorderbynumberResponse(struct soap*, const struct ns1__getorderbynumberResponse *, const char*, const char*);

inline int soap_write_ns1__getorderbynumberResponse(struct soap *soap, struct ns1__getorderbynumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getorderbynumberResponse(soap, p), 0) || soap_put_ns1__getorderbynumberResponse(soap, p, "ns1:getorderbynumberResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getorderbynumberResponse(struct soap *soap, const char *URL, struct ns1__getorderbynumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getorderbynumberResponse(soap, p), 0) || soap_put_ns1__getorderbynumberResponse(soap, p, "ns1:getorderbynumberResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getorderbynumberResponse(struct soap *soap, const char *URL, struct ns1__getorderbynumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getorderbynumberResponse(soap, p), 0) || soap_put_ns1__getorderbynumberResponse(soap, p, "ns1:getorderbynumberResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getorderbynumberResponse * SOAP_FMAC4 soap_get_ns1__getorderbynumberResponse(struct soap*, struct ns1__getorderbynumberResponse *, const char*, const char*);

inline int soap_read_ns1__getorderbynumberResponse(struct soap *soap, struct ns1__getorderbynumberResponse *p)
{
	if (p)
	{	soap_default_ns1__getorderbynumberResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getorderbynumberResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getorderbynumberResponse(struct soap *soap, const char *URL, struct ns1__getorderbynumberResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getorderbynumberResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getorderbynumberResponse(struct soap *soap, struct ns1__getorderbynumberResponse *p)
{
	if (soap_read_ns1__getorderbynumberResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__lingZuJianSelector_DEFINED
#define SOAP_TYPE_ns1__lingZuJianSelector_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__lingZuJianSelector(struct soap*, struct ns1__lingZuJianSelector *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__lingZuJianSelector(struct soap*, const struct ns1__lingZuJianSelector *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__lingZuJianSelector(struct soap*, const char*, int, const struct ns1__lingZuJianSelector *, const char*);
SOAP_FMAC3 struct ns1__lingZuJianSelector * SOAP_FMAC4 soap_in_ns1__lingZuJianSelector(struct soap*, const char*, struct ns1__lingZuJianSelector *, const char*);
SOAP_FMAC1 struct ns1__lingZuJianSelector * SOAP_FMAC2 soap_instantiate_ns1__lingZuJianSelector(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__lingZuJianSelector * soap_new_ns1__lingZuJianSelector(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__lingZuJianSelector(soap, n, NULL, NULL, NULL);
}

inline struct ns1__lingZuJianSelector * soap_new_req_ns1__lingZuJianSelector(
	struct soap *soap)
{
	struct ns1__lingZuJianSelector *_p = soap_new_ns1__lingZuJianSelector(soap);
	if (_p)
	{	soap_default_ns1__lingZuJianSelector(soap, _p);
	}
	return _p;
}

inline struct ns1__lingZuJianSelector * soap_new_set_ns1__lingZuJianSelector(
	struct soap *soap)
{
	struct ns1__lingZuJianSelector *_p = soap_new_ns1__lingZuJianSelector(soap);
	if (_p)
	{	soap_default_ns1__lingZuJianSelector(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__lingZuJianSelector(struct soap*, const struct ns1__lingZuJianSelector *, const char*, const char*);

inline int soap_write_ns1__lingZuJianSelector(struct soap *soap, struct ns1__lingZuJianSelector const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__lingZuJianSelector(soap, p), 0) || soap_put_ns1__lingZuJianSelector(soap, p, "ns1:lingZuJianSelector", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__lingZuJianSelector(struct soap *soap, const char *URL, struct ns1__lingZuJianSelector const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__lingZuJianSelector(soap, p), 0) || soap_put_ns1__lingZuJianSelector(soap, p, "ns1:lingZuJianSelector", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__lingZuJianSelector(struct soap *soap, const char *URL, struct ns1__lingZuJianSelector const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__lingZuJianSelector(soap, p), 0) || soap_put_ns1__lingZuJianSelector(soap, p, "ns1:lingZuJianSelector", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__lingZuJianSelector * SOAP_FMAC4 soap_get_ns1__lingZuJianSelector(struct soap*, struct ns1__lingZuJianSelector *, const char*, const char*);

inline int soap_read_ns1__lingZuJianSelector(struct soap *soap, struct ns1__lingZuJianSelector *p)
{
	if (p)
	{	soap_default_ns1__lingZuJianSelector(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__lingZuJianSelector(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__lingZuJianSelector(struct soap *soap, const char *URL, struct ns1__lingZuJianSelector *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__lingZuJianSelector(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__lingZuJianSelector(struct soap *soap, struct ns1__lingZuJianSelector *p)
{
	if (soap_read_ns1__lingZuJianSelector(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__lingZuJianSelectorResponse_DEFINED
#define SOAP_TYPE_ns1__lingZuJianSelectorResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__lingZuJianSelectorResponse(struct soap*, struct ns1__lingZuJianSelectorResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__lingZuJianSelectorResponse(struct soap*, const struct ns1__lingZuJianSelectorResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__lingZuJianSelectorResponse(struct soap*, const char*, int, const struct ns1__lingZuJianSelectorResponse *, const char*);
SOAP_FMAC3 struct ns1__lingZuJianSelectorResponse * SOAP_FMAC4 soap_in_ns1__lingZuJianSelectorResponse(struct soap*, const char*, struct ns1__lingZuJianSelectorResponse *, const char*);
SOAP_FMAC1 struct ns1__lingZuJianSelectorResponse * SOAP_FMAC2 soap_instantiate_ns1__lingZuJianSelectorResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__lingZuJianSelectorResponse * soap_new_ns1__lingZuJianSelectorResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__lingZuJianSelectorResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__lingZuJianSelectorResponse * soap_new_req_ns1__lingZuJianSelectorResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__lingZuJianSelectorResponse *_p = soap_new_ns1__lingZuJianSelectorResponse(soap);
	if (_p)
	{	soap_default_ns1__lingZuJianSelectorResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__lingZuJianSelectorResponse * soap_new_set_ns1__lingZuJianSelectorResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__lingZuJianSelectorResponse *_p = soap_new_ns1__lingZuJianSelectorResponse(soap);
	if (_p)
	{	soap_default_ns1__lingZuJianSelectorResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__lingZuJianSelectorResponse(struct soap*, const struct ns1__lingZuJianSelectorResponse *, const char*, const char*);

inline int soap_write_ns1__lingZuJianSelectorResponse(struct soap *soap, struct ns1__lingZuJianSelectorResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__lingZuJianSelectorResponse(soap, p), 0) || soap_put_ns1__lingZuJianSelectorResponse(soap, p, "ns1:lingZuJianSelectorResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__lingZuJianSelectorResponse(struct soap *soap, const char *URL, struct ns1__lingZuJianSelectorResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__lingZuJianSelectorResponse(soap, p), 0) || soap_put_ns1__lingZuJianSelectorResponse(soap, p, "ns1:lingZuJianSelectorResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__lingZuJianSelectorResponse(struct soap *soap, const char *URL, struct ns1__lingZuJianSelectorResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__lingZuJianSelectorResponse(soap, p), 0) || soap_put_ns1__lingZuJianSelectorResponse(soap, p, "ns1:lingZuJianSelectorResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__lingZuJianSelectorResponse * SOAP_FMAC4 soap_get_ns1__lingZuJianSelectorResponse(struct soap*, struct ns1__lingZuJianSelectorResponse *, const char*, const char*);

inline int soap_read_ns1__lingZuJianSelectorResponse(struct soap *soap, struct ns1__lingZuJianSelectorResponse *p)
{
	if (p)
	{	soap_default_ns1__lingZuJianSelectorResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__lingZuJianSelectorResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__lingZuJianSelectorResponse(struct soap *soap, const char *URL, struct ns1__lingZuJianSelectorResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__lingZuJianSelectorResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__lingZuJianSelectorResponse(struct soap *soap, struct ns1__lingZuJianSelectorResponse *p)
{
	if (soap_read_ns1__lingZuJianSelectorResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__sheBeiSelector_DEFINED
#define SOAP_TYPE_ns1__sheBeiSelector_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__sheBeiSelector(struct soap*, struct ns1__sheBeiSelector *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__sheBeiSelector(struct soap*, const struct ns1__sheBeiSelector *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sheBeiSelector(struct soap*, const char*, int, const struct ns1__sheBeiSelector *, const char*);
SOAP_FMAC3 struct ns1__sheBeiSelector * SOAP_FMAC4 soap_in_ns1__sheBeiSelector(struct soap*, const char*, struct ns1__sheBeiSelector *, const char*);
SOAP_FMAC1 struct ns1__sheBeiSelector * SOAP_FMAC2 soap_instantiate_ns1__sheBeiSelector(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__sheBeiSelector * soap_new_ns1__sheBeiSelector(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__sheBeiSelector(soap, n, NULL, NULL, NULL);
}

inline struct ns1__sheBeiSelector * soap_new_req_ns1__sheBeiSelector(
	struct soap *soap)
{
	struct ns1__sheBeiSelector *_p = soap_new_ns1__sheBeiSelector(soap);
	if (_p)
	{	soap_default_ns1__sheBeiSelector(soap, _p);
	}
	return _p;
}

inline struct ns1__sheBeiSelector * soap_new_set_ns1__sheBeiSelector(
	struct soap *soap)
{
	struct ns1__sheBeiSelector *_p = soap_new_ns1__sheBeiSelector(soap);
	if (_p)
	{	soap_default_ns1__sheBeiSelector(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__sheBeiSelector(struct soap*, const struct ns1__sheBeiSelector *, const char*, const char*);

inline int soap_write_ns1__sheBeiSelector(struct soap *soap, struct ns1__sheBeiSelector const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__sheBeiSelector(soap, p), 0) || soap_put_ns1__sheBeiSelector(soap, p, "ns1:sheBeiSelector", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__sheBeiSelector(struct soap *soap, const char *URL, struct ns1__sheBeiSelector const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__sheBeiSelector(soap, p), 0) || soap_put_ns1__sheBeiSelector(soap, p, "ns1:sheBeiSelector", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__sheBeiSelector(struct soap *soap, const char *URL, struct ns1__sheBeiSelector const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__sheBeiSelector(soap, p), 0) || soap_put_ns1__sheBeiSelector(soap, p, "ns1:sheBeiSelector", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__sheBeiSelector * SOAP_FMAC4 soap_get_ns1__sheBeiSelector(struct soap*, struct ns1__sheBeiSelector *, const char*, const char*);

inline int soap_read_ns1__sheBeiSelector(struct soap *soap, struct ns1__sheBeiSelector *p)
{
	if (p)
	{	soap_default_ns1__sheBeiSelector(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__sheBeiSelector(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__sheBeiSelector(struct soap *soap, const char *URL, struct ns1__sheBeiSelector *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__sheBeiSelector(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__sheBeiSelector(struct soap *soap, struct ns1__sheBeiSelector *p)
{
	if (soap_read_ns1__sheBeiSelector(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__sheBeiSelectorResponse_DEFINED
#define SOAP_TYPE_ns1__sheBeiSelectorResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__sheBeiSelectorResponse(struct soap*, struct ns1__sheBeiSelectorResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__sheBeiSelectorResponse(struct soap*, const struct ns1__sheBeiSelectorResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sheBeiSelectorResponse(struct soap*, const char*, int, const struct ns1__sheBeiSelectorResponse *, const char*);
SOAP_FMAC3 struct ns1__sheBeiSelectorResponse * SOAP_FMAC4 soap_in_ns1__sheBeiSelectorResponse(struct soap*, const char*, struct ns1__sheBeiSelectorResponse *, const char*);
SOAP_FMAC1 struct ns1__sheBeiSelectorResponse * SOAP_FMAC2 soap_instantiate_ns1__sheBeiSelectorResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__sheBeiSelectorResponse * soap_new_ns1__sheBeiSelectorResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__sheBeiSelectorResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__sheBeiSelectorResponse * soap_new_req_ns1__sheBeiSelectorResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__sheBeiSelectorResponse *_p = soap_new_ns1__sheBeiSelectorResponse(soap);
	if (_p)
	{	soap_default_ns1__sheBeiSelectorResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__sheBeiSelectorResponse * soap_new_set_ns1__sheBeiSelectorResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__sheBeiSelectorResponse *_p = soap_new_ns1__sheBeiSelectorResponse(soap);
	if (_p)
	{	soap_default_ns1__sheBeiSelectorResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__sheBeiSelectorResponse(struct soap*, const struct ns1__sheBeiSelectorResponse *, const char*, const char*);

inline int soap_write_ns1__sheBeiSelectorResponse(struct soap *soap, struct ns1__sheBeiSelectorResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__sheBeiSelectorResponse(soap, p), 0) || soap_put_ns1__sheBeiSelectorResponse(soap, p, "ns1:sheBeiSelectorResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__sheBeiSelectorResponse(struct soap *soap, const char *URL, struct ns1__sheBeiSelectorResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__sheBeiSelectorResponse(soap, p), 0) || soap_put_ns1__sheBeiSelectorResponse(soap, p, "ns1:sheBeiSelectorResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__sheBeiSelectorResponse(struct soap *soap, const char *URL, struct ns1__sheBeiSelectorResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__sheBeiSelectorResponse(soap, p), 0) || soap_put_ns1__sheBeiSelectorResponse(soap, p, "ns1:sheBeiSelectorResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__sheBeiSelectorResponse * SOAP_FMAC4 soap_get_ns1__sheBeiSelectorResponse(struct soap*, struct ns1__sheBeiSelectorResponse *, const char*, const char*);

inline int soap_read_ns1__sheBeiSelectorResponse(struct soap *soap, struct ns1__sheBeiSelectorResponse *p)
{
	if (p)
	{	soap_default_ns1__sheBeiSelectorResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__sheBeiSelectorResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__sheBeiSelectorResponse(struct soap *soap, const char *URL, struct ns1__sheBeiSelectorResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__sheBeiSelectorResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__sheBeiSelectorResponse(struct soap *soap, struct ns1__sheBeiSelectorResponse *p)
{
	if (soap_read_ns1__sheBeiSelectorResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__loadAssemblePartsByPartNumber_DEFINED
#define SOAP_TYPE_ns1__loadAssemblePartsByPartNumber_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__loadAssemblePartsByPartNumber(struct soap*, struct ns1__loadAssemblePartsByPartNumber *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__loadAssemblePartsByPartNumber(struct soap*, const struct ns1__loadAssemblePartsByPartNumber *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__loadAssemblePartsByPartNumber(struct soap*, const char*, int, const struct ns1__loadAssemblePartsByPartNumber *, const char*);
SOAP_FMAC3 struct ns1__loadAssemblePartsByPartNumber * SOAP_FMAC4 soap_in_ns1__loadAssemblePartsByPartNumber(struct soap*, const char*, struct ns1__loadAssemblePartsByPartNumber *, const char*);
SOAP_FMAC1 struct ns1__loadAssemblePartsByPartNumber * SOAP_FMAC2 soap_instantiate_ns1__loadAssemblePartsByPartNumber(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__loadAssemblePartsByPartNumber * soap_new_ns1__loadAssemblePartsByPartNumber(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__loadAssemblePartsByPartNumber(soap, n, NULL, NULL, NULL);
}

inline struct ns1__loadAssemblePartsByPartNumber * soap_new_req_ns1__loadAssemblePartsByPartNumber(
	struct soap *soap)
{
	struct ns1__loadAssemblePartsByPartNumber *_p = soap_new_ns1__loadAssemblePartsByPartNumber(soap);
	if (_p)
	{	soap_default_ns1__loadAssemblePartsByPartNumber(soap, _p);
	}
	return _p;
}

inline struct ns1__loadAssemblePartsByPartNumber * soap_new_set_ns1__loadAssemblePartsByPartNumber(
	struct soap *soap)
{
	struct ns1__loadAssemblePartsByPartNumber *_p = soap_new_ns1__loadAssemblePartsByPartNumber(soap);
	if (_p)
	{	soap_default_ns1__loadAssemblePartsByPartNumber(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__loadAssemblePartsByPartNumber(struct soap*, const struct ns1__loadAssemblePartsByPartNumber *, const char*, const char*);

inline int soap_write_ns1__loadAssemblePartsByPartNumber(struct soap *soap, struct ns1__loadAssemblePartsByPartNumber const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__loadAssemblePartsByPartNumber(soap, p), 0) || soap_put_ns1__loadAssemblePartsByPartNumber(soap, p, "ns1:loadAssemblePartsByPartNumber", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__loadAssemblePartsByPartNumber(struct soap *soap, const char *URL, struct ns1__loadAssemblePartsByPartNumber const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__loadAssemblePartsByPartNumber(soap, p), 0) || soap_put_ns1__loadAssemblePartsByPartNumber(soap, p, "ns1:loadAssemblePartsByPartNumber", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__loadAssemblePartsByPartNumber(struct soap *soap, const char *URL, struct ns1__loadAssemblePartsByPartNumber const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__loadAssemblePartsByPartNumber(soap, p), 0) || soap_put_ns1__loadAssemblePartsByPartNumber(soap, p, "ns1:loadAssemblePartsByPartNumber", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__loadAssemblePartsByPartNumber * SOAP_FMAC4 soap_get_ns1__loadAssemblePartsByPartNumber(struct soap*, struct ns1__loadAssemblePartsByPartNumber *, const char*, const char*);

inline int soap_read_ns1__loadAssemblePartsByPartNumber(struct soap *soap, struct ns1__loadAssemblePartsByPartNumber *p)
{
	if (p)
	{	soap_default_ns1__loadAssemblePartsByPartNumber(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__loadAssemblePartsByPartNumber(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__loadAssemblePartsByPartNumber(struct soap *soap, const char *URL, struct ns1__loadAssemblePartsByPartNumber *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__loadAssemblePartsByPartNumber(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__loadAssemblePartsByPartNumber(struct soap *soap, struct ns1__loadAssemblePartsByPartNumber *p)
{
	if (soap_read_ns1__loadAssemblePartsByPartNumber(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__loadAssemblePartsByPartNumberResponse_DEFINED
#define SOAP_TYPE_ns1__loadAssemblePartsByPartNumberResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__loadAssemblePartsByPartNumberResponse(struct soap*, struct ns1__loadAssemblePartsByPartNumberResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__loadAssemblePartsByPartNumberResponse(struct soap*, const struct ns1__loadAssemblePartsByPartNumberResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__loadAssemblePartsByPartNumberResponse(struct soap*, const char*, int, const struct ns1__loadAssemblePartsByPartNumberResponse *, const char*);
SOAP_FMAC3 struct ns1__loadAssemblePartsByPartNumberResponse * SOAP_FMAC4 soap_in_ns1__loadAssemblePartsByPartNumberResponse(struct soap*, const char*, struct ns1__loadAssemblePartsByPartNumberResponse *, const char*);
SOAP_FMAC1 struct ns1__loadAssemblePartsByPartNumberResponse * SOAP_FMAC2 soap_instantiate_ns1__loadAssemblePartsByPartNumberResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__loadAssemblePartsByPartNumberResponse * soap_new_ns1__loadAssemblePartsByPartNumberResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__loadAssemblePartsByPartNumberResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__loadAssemblePartsByPartNumberResponse * soap_new_req_ns1__loadAssemblePartsByPartNumberResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__loadAssemblePartsByPartNumberResponse *_p = soap_new_ns1__loadAssemblePartsByPartNumberResponse(soap);
	if (_p)
	{	soap_default_ns1__loadAssemblePartsByPartNumberResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__loadAssemblePartsByPartNumberResponse * soap_new_set_ns1__loadAssemblePartsByPartNumberResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__loadAssemblePartsByPartNumberResponse *_p = soap_new_ns1__loadAssemblePartsByPartNumberResponse(soap);
	if (_p)
	{	soap_default_ns1__loadAssemblePartsByPartNumberResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__loadAssemblePartsByPartNumberResponse(struct soap*, const struct ns1__loadAssemblePartsByPartNumberResponse *, const char*, const char*);

inline int soap_write_ns1__loadAssemblePartsByPartNumberResponse(struct soap *soap, struct ns1__loadAssemblePartsByPartNumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__loadAssemblePartsByPartNumberResponse(soap, p), 0) || soap_put_ns1__loadAssemblePartsByPartNumberResponse(soap, p, "ns1:loadAssemblePartsByPartNumberResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__loadAssemblePartsByPartNumberResponse(struct soap *soap, const char *URL, struct ns1__loadAssemblePartsByPartNumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__loadAssemblePartsByPartNumberResponse(soap, p), 0) || soap_put_ns1__loadAssemblePartsByPartNumberResponse(soap, p, "ns1:loadAssemblePartsByPartNumberResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__loadAssemblePartsByPartNumberResponse(struct soap *soap, const char *URL, struct ns1__loadAssemblePartsByPartNumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__loadAssemblePartsByPartNumberResponse(soap, p), 0) || soap_put_ns1__loadAssemblePartsByPartNumberResponse(soap, p, "ns1:loadAssemblePartsByPartNumberResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__loadAssemblePartsByPartNumberResponse * SOAP_FMAC4 soap_get_ns1__loadAssemblePartsByPartNumberResponse(struct soap*, struct ns1__loadAssemblePartsByPartNumberResponse *, const char*, const char*);

inline int soap_read_ns1__loadAssemblePartsByPartNumberResponse(struct soap *soap, struct ns1__loadAssemblePartsByPartNumberResponse *p)
{
	if (p)
	{	soap_default_ns1__loadAssemblePartsByPartNumberResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__loadAssemblePartsByPartNumberResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__loadAssemblePartsByPartNumberResponse(struct soap *soap, const char *URL, struct ns1__loadAssemblePartsByPartNumberResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__loadAssemblePartsByPartNumberResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__loadAssemblePartsByPartNumberResponse(struct soap *soap, struct ns1__loadAssemblePartsByPartNumberResponse *p)
{
	if (soap_read_ns1__loadAssemblePartsByPartNumberResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__gongZhuangSelector_DEFINED
#define SOAP_TYPE_ns1__gongZhuangSelector_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__gongZhuangSelector(struct soap*, struct ns1__gongZhuangSelector *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__gongZhuangSelector(struct soap*, const struct ns1__gongZhuangSelector *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__gongZhuangSelector(struct soap*, const char*, int, const struct ns1__gongZhuangSelector *, const char*);
SOAP_FMAC3 struct ns1__gongZhuangSelector * SOAP_FMAC4 soap_in_ns1__gongZhuangSelector(struct soap*, const char*, struct ns1__gongZhuangSelector *, const char*);
SOAP_FMAC1 struct ns1__gongZhuangSelector * SOAP_FMAC2 soap_instantiate_ns1__gongZhuangSelector(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__gongZhuangSelector * soap_new_ns1__gongZhuangSelector(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__gongZhuangSelector(soap, n, NULL, NULL, NULL);
}

inline struct ns1__gongZhuangSelector * soap_new_req_ns1__gongZhuangSelector(
	struct soap *soap)
{
	struct ns1__gongZhuangSelector *_p = soap_new_ns1__gongZhuangSelector(soap);
	if (_p)
	{	soap_default_ns1__gongZhuangSelector(soap, _p);
	}
	return _p;
}

inline struct ns1__gongZhuangSelector * soap_new_set_ns1__gongZhuangSelector(
	struct soap *soap)
{
	struct ns1__gongZhuangSelector *_p = soap_new_ns1__gongZhuangSelector(soap);
	if (_p)
	{	soap_default_ns1__gongZhuangSelector(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__gongZhuangSelector(struct soap*, const struct ns1__gongZhuangSelector *, const char*, const char*);

inline int soap_write_ns1__gongZhuangSelector(struct soap *soap, struct ns1__gongZhuangSelector const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__gongZhuangSelector(soap, p), 0) || soap_put_ns1__gongZhuangSelector(soap, p, "ns1:gongZhuangSelector", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__gongZhuangSelector(struct soap *soap, const char *URL, struct ns1__gongZhuangSelector const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__gongZhuangSelector(soap, p), 0) || soap_put_ns1__gongZhuangSelector(soap, p, "ns1:gongZhuangSelector", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__gongZhuangSelector(struct soap *soap, const char *URL, struct ns1__gongZhuangSelector const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__gongZhuangSelector(soap, p), 0) || soap_put_ns1__gongZhuangSelector(soap, p, "ns1:gongZhuangSelector", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__gongZhuangSelector * SOAP_FMAC4 soap_get_ns1__gongZhuangSelector(struct soap*, struct ns1__gongZhuangSelector *, const char*, const char*);

inline int soap_read_ns1__gongZhuangSelector(struct soap *soap, struct ns1__gongZhuangSelector *p)
{
	if (p)
	{	soap_default_ns1__gongZhuangSelector(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__gongZhuangSelector(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__gongZhuangSelector(struct soap *soap, const char *URL, struct ns1__gongZhuangSelector *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__gongZhuangSelector(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__gongZhuangSelector(struct soap *soap, struct ns1__gongZhuangSelector *p)
{
	if (soap_read_ns1__gongZhuangSelector(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__gongZhuangSelectorResponse_DEFINED
#define SOAP_TYPE_ns1__gongZhuangSelectorResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__gongZhuangSelectorResponse(struct soap*, struct ns1__gongZhuangSelectorResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__gongZhuangSelectorResponse(struct soap*, const struct ns1__gongZhuangSelectorResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__gongZhuangSelectorResponse(struct soap*, const char*, int, const struct ns1__gongZhuangSelectorResponse *, const char*);
SOAP_FMAC3 struct ns1__gongZhuangSelectorResponse * SOAP_FMAC4 soap_in_ns1__gongZhuangSelectorResponse(struct soap*, const char*, struct ns1__gongZhuangSelectorResponse *, const char*);
SOAP_FMAC1 struct ns1__gongZhuangSelectorResponse * SOAP_FMAC2 soap_instantiate_ns1__gongZhuangSelectorResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__gongZhuangSelectorResponse * soap_new_ns1__gongZhuangSelectorResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__gongZhuangSelectorResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__gongZhuangSelectorResponse * soap_new_req_ns1__gongZhuangSelectorResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__gongZhuangSelectorResponse *_p = soap_new_ns1__gongZhuangSelectorResponse(soap);
	if (_p)
	{	soap_default_ns1__gongZhuangSelectorResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__gongZhuangSelectorResponse * soap_new_set_ns1__gongZhuangSelectorResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__gongZhuangSelectorResponse *_p = soap_new_ns1__gongZhuangSelectorResponse(soap);
	if (_p)
	{	soap_default_ns1__gongZhuangSelectorResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__gongZhuangSelectorResponse(struct soap*, const struct ns1__gongZhuangSelectorResponse *, const char*, const char*);

inline int soap_write_ns1__gongZhuangSelectorResponse(struct soap *soap, struct ns1__gongZhuangSelectorResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__gongZhuangSelectorResponse(soap, p), 0) || soap_put_ns1__gongZhuangSelectorResponse(soap, p, "ns1:gongZhuangSelectorResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__gongZhuangSelectorResponse(struct soap *soap, const char *URL, struct ns1__gongZhuangSelectorResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__gongZhuangSelectorResponse(soap, p), 0) || soap_put_ns1__gongZhuangSelectorResponse(soap, p, "ns1:gongZhuangSelectorResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__gongZhuangSelectorResponse(struct soap *soap, const char *URL, struct ns1__gongZhuangSelectorResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__gongZhuangSelectorResponse(soap, p), 0) || soap_put_ns1__gongZhuangSelectorResponse(soap, p, "ns1:gongZhuangSelectorResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__gongZhuangSelectorResponse * SOAP_FMAC4 soap_get_ns1__gongZhuangSelectorResponse(struct soap*, struct ns1__gongZhuangSelectorResponse *, const char*, const char*);

inline int soap_read_ns1__gongZhuangSelectorResponse(struct soap *soap, struct ns1__gongZhuangSelectorResponse *p)
{
	if (p)
	{	soap_default_ns1__gongZhuangSelectorResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__gongZhuangSelectorResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__gongZhuangSelectorResponse(struct soap *soap, const char *URL, struct ns1__gongZhuangSelectorResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__gongZhuangSelectorResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__gongZhuangSelectorResponse(struct soap *soap, struct ns1__gongZhuangSelectorResponse *p)
{
	if (soap_read_ns1__gongZhuangSelectorResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__gongliangjiajuSelector_DEFINED
#define SOAP_TYPE_ns1__gongliangjiajuSelector_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__gongliangjiajuSelector(struct soap*, struct ns1__gongliangjiajuSelector *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__gongliangjiajuSelector(struct soap*, const struct ns1__gongliangjiajuSelector *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__gongliangjiajuSelector(struct soap*, const char*, int, const struct ns1__gongliangjiajuSelector *, const char*);
SOAP_FMAC3 struct ns1__gongliangjiajuSelector * SOAP_FMAC4 soap_in_ns1__gongliangjiajuSelector(struct soap*, const char*, struct ns1__gongliangjiajuSelector *, const char*);
SOAP_FMAC1 struct ns1__gongliangjiajuSelector * SOAP_FMAC2 soap_instantiate_ns1__gongliangjiajuSelector(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__gongliangjiajuSelector * soap_new_ns1__gongliangjiajuSelector(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__gongliangjiajuSelector(soap, n, NULL, NULL, NULL);
}

inline struct ns1__gongliangjiajuSelector * soap_new_req_ns1__gongliangjiajuSelector(
	struct soap *soap)
{
	struct ns1__gongliangjiajuSelector *_p = soap_new_ns1__gongliangjiajuSelector(soap);
	if (_p)
	{	soap_default_ns1__gongliangjiajuSelector(soap, _p);
	}
	return _p;
}

inline struct ns1__gongliangjiajuSelector * soap_new_set_ns1__gongliangjiajuSelector(
	struct soap *soap)
{
	struct ns1__gongliangjiajuSelector *_p = soap_new_ns1__gongliangjiajuSelector(soap);
	if (_p)
	{	soap_default_ns1__gongliangjiajuSelector(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__gongliangjiajuSelector(struct soap*, const struct ns1__gongliangjiajuSelector *, const char*, const char*);

inline int soap_write_ns1__gongliangjiajuSelector(struct soap *soap, struct ns1__gongliangjiajuSelector const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__gongliangjiajuSelector(soap, p), 0) || soap_put_ns1__gongliangjiajuSelector(soap, p, "ns1:gongliangjiajuSelector", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__gongliangjiajuSelector(struct soap *soap, const char *URL, struct ns1__gongliangjiajuSelector const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__gongliangjiajuSelector(soap, p), 0) || soap_put_ns1__gongliangjiajuSelector(soap, p, "ns1:gongliangjiajuSelector", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__gongliangjiajuSelector(struct soap *soap, const char *URL, struct ns1__gongliangjiajuSelector const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__gongliangjiajuSelector(soap, p), 0) || soap_put_ns1__gongliangjiajuSelector(soap, p, "ns1:gongliangjiajuSelector", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__gongliangjiajuSelector * SOAP_FMAC4 soap_get_ns1__gongliangjiajuSelector(struct soap*, struct ns1__gongliangjiajuSelector *, const char*, const char*);

inline int soap_read_ns1__gongliangjiajuSelector(struct soap *soap, struct ns1__gongliangjiajuSelector *p)
{
	if (p)
	{	soap_default_ns1__gongliangjiajuSelector(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__gongliangjiajuSelector(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__gongliangjiajuSelector(struct soap *soap, const char *URL, struct ns1__gongliangjiajuSelector *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__gongliangjiajuSelector(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__gongliangjiajuSelector(struct soap *soap, struct ns1__gongliangjiajuSelector *p)
{
	if (soap_read_ns1__gongliangjiajuSelector(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__gongliangjiajuSelectorResponse_DEFINED
#define SOAP_TYPE_ns1__gongliangjiajuSelectorResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__gongliangjiajuSelectorResponse(struct soap*, struct ns1__gongliangjiajuSelectorResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__gongliangjiajuSelectorResponse(struct soap*, const struct ns1__gongliangjiajuSelectorResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__gongliangjiajuSelectorResponse(struct soap*, const char*, int, const struct ns1__gongliangjiajuSelectorResponse *, const char*);
SOAP_FMAC3 struct ns1__gongliangjiajuSelectorResponse * SOAP_FMAC4 soap_in_ns1__gongliangjiajuSelectorResponse(struct soap*, const char*, struct ns1__gongliangjiajuSelectorResponse *, const char*);
SOAP_FMAC1 struct ns1__gongliangjiajuSelectorResponse * SOAP_FMAC2 soap_instantiate_ns1__gongliangjiajuSelectorResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__gongliangjiajuSelectorResponse * soap_new_ns1__gongliangjiajuSelectorResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__gongliangjiajuSelectorResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__gongliangjiajuSelectorResponse * soap_new_req_ns1__gongliangjiajuSelectorResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__gongliangjiajuSelectorResponse *_p = soap_new_ns1__gongliangjiajuSelectorResponse(soap);
	if (_p)
	{	soap_default_ns1__gongliangjiajuSelectorResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__gongliangjiajuSelectorResponse * soap_new_set_ns1__gongliangjiajuSelectorResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__gongliangjiajuSelectorResponse *_p = soap_new_ns1__gongliangjiajuSelectorResponse(soap);
	if (_p)
	{	soap_default_ns1__gongliangjiajuSelectorResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__gongliangjiajuSelectorResponse(struct soap*, const struct ns1__gongliangjiajuSelectorResponse *, const char*, const char*);

inline int soap_write_ns1__gongliangjiajuSelectorResponse(struct soap *soap, struct ns1__gongliangjiajuSelectorResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__gongliangjiajuSelectorResponse(soap, p), 0) || soap_put_ns1__gongliangjiajuSelectorResponse(soap, p, "ns1:gongliangjiajuSelectorResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__gongliangjiajuSelectorResponse(struct soap *soap, const char *URL, struct ns1__gongliangjiajuSelectorResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__gongliangjiajuSelectorResponse(soap, p), 0) || soap_put_ns1__gongliangjiajuSelectorResponse(soap, p, "ns1:gongliangjiajuSelectorResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__gongliangjiajuSelectorResponse(struct soap *soap, const char *URL, struct ns1__gongliangjiajuSelectorResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__gongliangjiajuSelectorResponse(soap, p), 0) || soap_put_ns1__gongliangjiajuSelectorResponse(soap, p, "ns1:gongliangjiajuSelectorResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__gongliangjiajuSelectorResponse * SOAP_FMAC4 soap_get_ns1__gongliangjiajuSelectorResponse(struct soap*, struct ns1__gongliangjiajuSelectorResponse *, const char*, const char*);

inline int soap_read_ns1__gongliangjiajuSelectorResponse(struct soap *soap, struct ns1__gongliangjiajuSelectorResponse *p)
{
	if (p)
	{	soap_default_ns1__gongliangjiajuSelectorResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__gongliangjiajuSelectorResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__gongliangjiajuSelectorResponse(struct soap *soap, const char *URL, struct ns1__gongliangjiajuSelectorResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__gongliangjiajuSelectorResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__gongliangjiajuSelectorResponse(struct soap *soap, struct ns1__gongliangjiajuSelectorResponse *p)
{
	if (soap_read_ns1__gongliangjiajuSelectorResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__fuZhuJianSelector_DEFINED
#define SOAP_TYPE_ns1__fuZhuJianSelector_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__fuZhuJianSelector(struct soap*, struct ns1__fuZhuJianSelector *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__fuZhuJianSelector(struct soap*, const struct ns1__fuZhuJianSelector *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__fuZhuJianSelector(struct soap*, const char*, int, const struct ns1__fuZhuJianSelector *, const char*);
SOAP_FMAC3 struct ns1__fuZhuJianSelector * SOAP_FMAC4 soap_in_ns1__fuZhuJianSelector(struct soap*, const char*, struct ns1__fuZhuJianSelector *, const char*);
SOAP_FMAC1 struct ns1__fuZhuJianSelector * SOAP_FMAC2 soap_instantiate_ns1__fuZhuJianSelector(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__fuZhuJianSelector * soap_new_ns1__fuZhuJianSelector(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__fuZhuJianSelector(soap, n, NULL, NULL, NULL);
}

inline struct ns1__fuZhuJianSelector * soap_new_req_ns1__fuZhuJianSelector(
	struct soap *soap)
{
	struct ns1__fuZhuJianSelector *_p = soap_new_ns1__fuZhuJianSelector(soap);
	if (_p)
	{	soap_default_ns1__fuZhuJianSelector(soap, _p);
	}
	return _p;
}

inline struct ns1__fuZhuJianSelector * soap_new_set_ns1__fuZhuJianSelector(
	struct soap *soap)
{
	struct ns1__fuZhuJianSelector *_p = soap_new_ns1__fuZhuJianSelector(soap);
	if (_p)
	{	soap_default_ns1__fuZhuJianSelector(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__fuZhuJianSelector(struct soap*, const struct ns1__fuZhuJianSelector *, const char*, const char*);

inline int soap_write_ns1__fuZhuJianSelector(struct soap *soap, struct ns1__fuZhuJianSelector const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__fuZhuJianSelector(soap, p), 0) || soap_put_ns1__fuZhuJianSelector(soap, p, "ns1:fuZhuJianSelector", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__fuZhuJianSelector(struct soap *soap, const char *URL, struct ns1__fuZhuJianSelector const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__fuZhuJianSelector(soap, p), 0) || soap_put_ns1__fuZhuJianSelector(soap, p, "ns1:fuZhuJianSelector", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__fuZhuJianSelector(struct soap *soap, const char *URL, struct ns1__fuZhuJianSelector const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__fuZhuJianSelector(soap, p), 0) || soap_put_ns1__fuZhuJianSelector(soap, p, "ns1:fuZhuJianSelector", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__fuZhuJianSelector * SOAP_FMAC4 soap_get_ns1__fuZhuJianSelector(struct soap*, struct ns1__fuZhuJianSelector *, const char*, const char*);

inline int soap_read_ns1__fuZhuJianSelector(struct soap *soap, struct ns1__fuZhuJianSelector *p)
{
	if (p)
	{	soap_default_ns1__fuZhuJianSelector(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__fuZhuJianSelector(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__fuZhuJianSelector(struct soap *soap, const char *URL, struct ns1__fuZhuJianSelector *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__fuZhuJianSelector(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__fuZhuJianSelector(struct soap *soap, struct ns1__fuZhuJianSelector *p)
{
	if (soap_read_ns1__fuZhuJianSelector(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__fuZhuJianSelectorResponse_DEFINED
#define SOAP_TYPE_ns1__fuZhuJianSelectorResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__fuZhuJianSelectorResponse(struct soap*, struct ns1__fuZhuJianSelectorResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__fuZhuJianSelectorResponse(struct soap*, const struct ns1__fuZhuJianSelectorResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__fuZhuJianSelectorResponse(struct soap*, const char*, int, const struct ns1__fuZhuJianSelectorResponse *, const char*);
SOAP_FMAC3 struct ns1__fuZhuJianSelectorResponse * SOAP_FMAC4 soap_in_ns1__fuZhuJianSelectorResponse(struct soap*, const char*, struct ns1__fuZhuJianSelectorResponse *, const char*);
SOAP_FMAC1 struct ns1__fuZhuJianSelectorResponse * SOAP_FMAC2 soap_instantiate_ns1__fuZhuJianSelectorResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__fuZhuJianSelectorResponse * soap_new_ns1__fuZhuJianSelectorResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__fuZhuJianSelectorResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__fuZhuJianSelectorResponse * soap_new_req_ns1__fuZhuJianSelectorResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__fuZhuJianSelectorResponse *_p = soap_new_ns1__fuZhuJianSelectorResponse(soap);
	if (_p)
	{	soap_default_ns1__fuZhuJianSelectorResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__fuZhuJianSelectorResponse * soap_new_set_ns1__fuZhuJianSelectorResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__fuZhuJianSelectorResponse *_p = soap_new_ns1__fuZhuJianSelectorResponse(soap);
	if (_p)
	{	soap_default_ns1__fuZhuJianSelectorResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__fuZhuJianSelectorResponse(struct soap*, const struct ns1__fuZhuJianSelectorResponse *, const char*, const char*);

inline int soap_write_ns1__fuZhuJianSelectorResponse(struct soap *soap, struct ns1__fuZhuJianSelectorResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__fuZhuJianSelectorResponse(soap, p), 0) || soap_put_ns1__fuZhuJianSelectorResponse(soap, p, "ns1:fuZhuJianSelectorResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__fuZhuJianSelectorResponse(struct soap *soap, const char *URL, struct ns1__fuZhuJianSelectorResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__fuZhuJianSelectorResponse(soap, p), 0) || soap_put_ns1__fuZhuJianSelectorResponse(soap, p, "ns1:fuZhuJianSelectorResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__fuZhuJianSelectorResponse(struct soap *soap, const char *URL, struct ns1__fuZhuJianSelectorResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__fuZhuJianSelectorResponse(soap, p), 0) || soap_put_ns1__fuZhuJianSelectorResponse(soap, p, "ns1:fuZhuJianSelectorResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__fuZhuJianSelectorResponse * SOAP_FMAC4 soap_get_ns1__fuZhuJianSelectorResponse(struct soap*, struct ns1__fuZhuJianSelectorResponse *, const char*, const char*);

inline int soap_read_ns1__fuZhuJianSelectorResponse(struct soap *soap, struct ns1__fuZhuJianSelectorResponse *p)
{
	if (p)
	{	soap_default_ns1__fuZhuJianSelectorResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__fuZhuJianSelectorResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__fuZhuJianSelectorResponse(struct soap *soap, const char *URL, struct ns1__fuZhuJianSelectorResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__fuZhuJianSelectorResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__fuZhuJianSelectorResponse(struct soap *soap, struct ns1__fuZhuJianSelectorResponse *p)
{
	if (soap_read_ns1__fuZhuJianSelectorResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__savechangeordertowc_DEFINED
#define SOAP_TYPE_ns1__savechangeordertowc_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__savechangeordertowc(struct soap*, struct ns1__savechangeordertowc *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__savechangeordertowc(struct soap*, const struct ns1__savechangeordertowc *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__savechangeordertowc(struct soap*, const char*, int, const struct ns1__savechangeordertowc *, const char*);
SOAP_FMAC3 struct ns1__savechangeordertowc * SOAP_FMAC4 soap_in_ns1__savechangeordertowc(struct soap*, const char*, struct ns1__savechangeordertowc *, const char*);
SOAP_FMAC1 struct ns1__savechangeordertowc * SOAP_FMAC2 soap_instantiate_ns1__savechangeordertowc(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__savechangeordertowc * soap_new_ns1__savechangeordertowc(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__savechangeordertowc(soap, n, NULL, NULL, NULL);
}

inline struct ns1__savechangeordertowc * soap_new_req_ns1__savechangeordertowc(
	struct soap *soap)
{
	struct ns1__savechangeordertowc *_p = soap_new_ns1__savechangeordertowc(soap);
	if (_p)
	{	soap_default_ns1__savechangeordertowc(soap, _p);
	}
	return _p;
}

inline struct ns1__savechangeordertowc * soap_new_set_ns1__savechangeordertowc(
	struct soap *soap)
{
	struct ns1__savechangeordertowc *_p = soap_new_ns1__savechangeordertowc(soap);
	if (_p)
	{	soap_default_ns1__savechangeordertowc(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__savechangeordertowc(struct soap*, const struct ns1__savechangeordertowc *, const char*, const char*);

inline int soap_write_ns1__savechangeordertowc(struct soap *soap, struct ns1__savechangeordertowc const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__savechangeordertowc(soap, p), 0) || soap_put_ns1__savechangeordertowc(soap, p, "ns1:savechangeordertowc", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__savechangeordertowc(struct soap *soap, const char *URL, struct ns1__savechangeordertowc const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__savechangeordertowc(soap, p), 0) || soap_put_ns1__savechangeordertowc(soap, p, "ns1:savechangeordertowc", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__savechangeordertowc(struct soap *soap, const char *URL, struct ns1__savechangeordertowc const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__savechangeordertowc(soap, p), 0) || soap_put_ns1__savechangeordertowc(soap, p, "ns1:savechangeordertowc", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__savechangeordertowc * SOAP_FMAC4 soap_get_ns1__savechangeordertowc(struct soap*, struct ns1__savechangeordertowc *, const char*, const char*);

inline int soap_read_ns1__savechangeordertowc(struct soap *soap, struct ns1__savechangeordertowc *p)
{
	if (p)
	{	soap_default_ns1__savechangeordertowc(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__savechangeordertowc(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__savechangeordertowc(struct soap *soap, const char *URL, struct ns1__savechangeordertowc *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__savechangeordertowc(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__savechangeordertowc(struct soap *soap, struct ns1__savechangeordertowc *p)
{
	if (soap_read_ns1__savechangeordertowc(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__savechangeordertowcResponse_DEFINED
#define SOAP_TYPE_ns1__savechangeordertowcResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__savechangeordertowcResponse(struct soap*, struct ns1__savechangeordertowcResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__savechangeordertowcResponse(struct soap*, const struct ns1__savechangeordertowcResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__savechangeordertowcResponse(struct soap*, const char*, int, const struct ns1__savechangeordertowcResponse *, const char*);
SOAP_FMAC3 struct ns1__savechangeordertowcResponse * SOAP_FMAC4 soap_in_ns1__savechangeordertowcResponse(struct soap*, const char*, struct ns1__savechangeordertowcResponse *, const char*);
SOAP_FMAC1 struct ns1__savechangeordertowcResponse * SOAP_FMAC2 soap_instantiate_ns1__savechangeordertowcResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__savechangeordertowcResponse * soap_new_ns1__savechangeordertowcResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__savechangeordertowcResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__savechangeordertowcResponse * soap_new_req_ns1__savechangeordertowcResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__savechangeordertowcResponse *_p = soap_new_ns1__savechangeordertowcResponse(soap);
	if (_p)
	{	soap_default_ns1__savechangeordertowcResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__savechangeordertowcResponse * soap_new_set_ns1__savechangeordertowcResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__savechangeordertowcResponse *_p = soap_new_ns1__savechangeordertowcResponse(soap);
	if (_p)
	{	soap_default_ns1__savechangeordertowcResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__savechangeordertowcResponse(struct soap*, const struct ns1__savechangeordertowcResponse *, const char*, const char*);

inline int soap_write_ns1__savechangeordertowcResponse(struct soap *soap, struct ns1__savechangeordertowcResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__savechangeordertowcResponse(soap, p), 0) || soap_put_ns1__savechangeordertowcResponse(soap, p, "ns1:savechangeordertowcResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__savechangeordertowcResponse(struct soap *soap, const char *URL, struct ns1__savechangeordertowcResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__savechangeordertowcResponse(soap, p), 0) || soap_put_ns1__savechangeordertowcResponse(soap, p, "ns1:savechangeordertowcResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__savechangeordertowcResponse(struct soap *soap, const char *URL, struct ns1__savechangeordertowcResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__savechangeordertowcResponse(soap, p), 0) || soap_put_ns1__savechangeordertowcResponse(soap, p, "ns1:savechangeordertowcResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__savechangeordertowcResponse * SOAP_FMAC4 soap_get_ns1__savechangeordertowcResponse(struct soap*, struct ns1__savechangeordertowcResponse *, const char*, const char*);

inline int soap_read_ns1__savechangeordertowcResponse(struct soap *soap, struct ns1__savechangeordertowcResponse *p)
{
	if (p)
	{	soap_default_ns1__savechangeordertowcResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__savechangeordertowcResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__savechangeordertowcResponse(struct soap *soap, const char *URL, struct ns1__savechangeordertowcResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__savechangeordertowcResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__savechangeordertowcResponse(struct soap *soap, struct ns1__savechangeordertowcResponse *p)
{
	if (soap_read_ns1__savechangeordertowcResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getPbomOriginalItemByPartNumber_DEFINED
#define SOAP_TYPE_ns1__getPbomOriginalItemByPartNumber_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getPbomOriginalItemByPartNumber(struct soap*, struct ns1__getPbomOriginalItemByPartNumber *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getPbomOriginalItemByPartNumber(struct soap*, const struct ns1__getPbomOriginalItemByPartNumber *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getPbomOriginalItemByPartNumber(struct soap*, const char*, int, const struct ns1__getPbomOriginalItemByPartNumber *, const char*);
SOAP_FMAC3 struct ns1__getPbomOriginalItemByPartNumber * SOAP_FMAC4 soap_in_ns1__getPbomOriginalItemByPartNumber(struct soap*, const char*, struct ns1__getPbomOriginalItemByPartNumber *, const char*);
SOAP_FMAC1 struct ns1__getPbomOriginalItemByPartNumber * SOAP_FMAC2 soap_instantiate_ns1__getPbomOriginalItemByPartNumber(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getPbomOriginalItemByPartNumber * soap_new_ns1__getPbomOriginalItemByPartNumber(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getPbomOriginalItemByPartNumber(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getPbomOriginalItemByPartNumber * soap_new_req_ns1__getPbomOriginalItemByPartNumber(
	struct soap *soap)
{
	struct ns1__getPbomOriginalItemByPartNumber *_p = soap_new_ns1__getPbomOriginalItemByPartNumber(soap);
	if (_p)
	{	soap_default_ns1__getPbomOriginalItemByPartNumber(soap, _p);
	}
	return _p;
}

inline struct ns1__getPbomOriginalItemByPartNumber * soap_new_set_ns1__getPbomOriginalItemByPartNumber(
	struct soap *soap)
{
	struct ns1__getPbomOriginalItemByPartNumber *_p = soap_new_ns1__getPbomOriginalItemByPartNumber(soap);
	if (_p)
	{	soap_default_ns1__getPbomOriginalItemByPartNumber(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getPbomOriginalItemByPartNumber(struct soap*, const struct ns1__getPbomOriginalItemByPartNumber *, const char*, const char*);

inline int soap_write_ns1__getPbomOriginalItemByPartNumber(struct soap *soap, struct ns1__getPbomOriginalItemByPartNumber const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getPbomOriginalItemByPartNumber(soap, p), 0) || soap_put_ns1__getPbomOriginalItemByPartNumber(soap, p, "ns1:getPbomOriginalItemByPartNumber", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getPbomOriginalItemByPartNumber(struct soap *soap, const char *URL, struct ns1__getPbomOriginalItemByPartNumber const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getPbomOriginalItemByPartNumber(soap, p), 0) || soap_put_ns1__getPbomOriginalItemByPartNumber(soap, p, "ns1:getPbomOriginalItemByPartNumber", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getPbomOriginalItemByPartNumber(struct soap *soap, const char *URL, struct ns1__getPbomOriginalItemByPartNumber const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getPbomOriginalItemByPartNumber(soap, p), 0) || soap_put_ns1__getPbomOriginalItemByPartNumber(soap, p, "ns1:getPbomOriginalItemByPartNumber", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getPbomOriginalItemByPartNumber * SOAP_FMAC4 soap_get_ns1__getPbomOriginalItemByPartNumber(struct soap*, struct ns1__getPbomOriginalItemByPartNumber *, const char*, const char*);

inline int soap_read_ns1__getPbomOriginalItemByPartNumber(struct soap *soap, struct ns1__getPbomOriginalItemByPartNumber *p)
{
	if (p)
	{	soap_default_ns1__getPbomOriginalItemByPartNumber(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getPbomOriginalItemByPartNumber(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getPbomOriginalItemByPartNumber(struct soap *soap, const char *URL, struct ns1__getPbomOriginalItemByPartNumber *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getPbomOriginalItemByPartNumber(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getPbomOriginalItemByPartNumber(struct soap *soap, struct ns1__getPbomOriginalItemByPartNumber *p)
{
	if (soap_read_ns1__getPbomOriginalItemByPartNumber(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getPbomOriginalItemByPartNumberResponse_DEFINED
#define SOAP_TYPE_ns1__getPbomOriginalItemByPartNumberResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getPbomOriginalItemByPartNumberResponse(struct soap*, struct ns1__getPbomOriginalItemByPartNumberResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getPbomOriginalItemByPartNumberResponse(struct soap*, const struct ns1__getPbomOriginalItemByPartNumberResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getPbomOriginalItemByPartNumberResponse(struct soap*, const char*, int, const struct ns1__getPbomOriginalItemByPartNumberResponse *, const char*);
SOAP_FMAC3 struct ns1__getPbomOriginalItemByPartNumberResponse * SOAP_FMAC4 soap_in_ns1__getPbomOriginalItemByPartNumberResponse(struct soap*, const char*, struct ns1__getPbomOriginalItemByPartNumberResponse *, const char*);
SOAP_FMAC1 struct ns1__getPbomOriginalItemByPartNumberResponse * SOAP_FMAC2 soap_instantiate_ns1__getPbomOriginalItemByPartNumberResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getPbomOriginalItemByPartNumberResponse * soap_new_ns1__getPbomOriginalItemByPartNumberResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getPbomOriginalItemByPartNumberResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getPbomOriginalItemByPartNumberResponse * soap_new_req_ns1__getPbomOriginalItemByPartNumberResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getPbomOriginalItemByPartNumberResponse *_p = soap_new_ns1__getPbomOriginalItemByPartNumberResponse(soap);
	if (_p)
	{	soap_default_ns1__getPbomOriginalItemByPartNumberResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__getPbomOriginalItemByPartNumberResponse * soap_new_set_ns1__getPbomOriginalItemByPartNumberResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getPbomOriginalItemByPartNumberResponse *_p = soap_new_ns1__getPbomOriginalItemByPartNumberResponse(soap);
	if (_p)
	{	soap_default_ns1__getPbomOriginalItemByPartNumberResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getPbomOriginalItemByPartNumberResponse(struct soap*, const struct ns1__getPbomOriginalItemByPartNumberResponse *, const char*, const char*);

inline int soap_write_ns1__getPbomOriginalItemByPartNumberResponse(struct soap *soap, struct ns1__getPbomOriginalItemByPartNumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getPbomOriginalItemByPartNumberResponse(soap, p), 0) || soap_put_ns1__getPbomOriginalItemByPartNumberResponse(soap, p, "ns1:getPbomOriginalItemByPartNumberResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getPbomOriginalItemByPartNumberResponse(struct soap *soap, const char *URL, struct ns1__getPbomOriginalItemByPartNumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getPbomOriginalItemByPartNumberResponse(soap, p), 0) || soap_put_ns1__getPbomOriginalItemByPartNumberResponse(soap, p, "ns1:getPbomOriginalItemByPartNumberResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getPbomOriginalItemByPartNumberResponse(struct soap *soap, const char *URL, struct ns1__getPbomOriginalItemByPartNumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getPbomOriginalItemByPartNumberResponse(soap, p), 0) || soap_put_ns1__getPbomOriginalItemByPartNumberResponse(soap, p, "ns1:getPbomOriginalItemByPartNumberResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getPbomOriginalItemByPartNumberResponse * SOAP_FMAC4 soap_get_ns1__getPbomOriginalItemByPartNumberResponse(struct soap*, struct ns1__getPbomOriginalItemByPartNumberResponse *, const char*, const char*);

inline int soap_read_ns1__getPbomOriginalItemByPartNumberResponse(struct soap *soap, struct ns1__getPbomOriginalItemByPartNumberResponse *p)
{
	if (p)
	{	soap_default_ns1__getPbomOriginalItemByPartNumberResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getPbomOriginalItemByPartNumberResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getPbomOriginalItemByPartNumberResponse(struct soap *soap, const char *URL, struct ns1__getPbomOriginalItemByPartNumberResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getPbomOriginalItemByPartNumberResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getPbomOriginalItemByPartNumberResponse(struct soap *soap, struct ns1__getPbomOriginalItemByPartNumberResponse *p)
{
	if (soap_read_ns1__getPbomOriginalItemByPartNumberResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getPbomEndPartByPartNumber_DEFINED
#define SOAP_TYPE_ns1__getPbomEndPartByPartNumber_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getPbomEndPartByPartNumber(struct soap*, struct ns1__getPbomEndPartByPartNumber *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getPbomEndPartByPartNumber(struct soap*, const struct ns1__getPbomEndPartByPartNumber *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getPbomEndPartByPartNumber(struct soap*, const char*, int, const struct ns1__getPbomEndPartByPartNumber *, const char*);
SOAP_FMAC3 struct ns1__getPbomEndPartByPartNumber * SOAP_FMAC4 soap_in_ns1__getPbomEndPartByPartNumber(struct soap*, const char*, struct ns1__getPbomEndPartByPartNumber *, const char*);
SOAP_FMAC1 struct ns1__getPbomEndPartByPartNumber * SOAP_FMAC2 soap_instantiate_ns1__getPbomEndPartByPartNumber(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getPbomEndPartByPartNumber * soap_new_ns1__getPbomEndPartByPartNumber(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getPbomEndPartByPartNumber(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getPbomEndPartByPartNumber * soap_new_req_ns1__getPbomEndPartByPartNumber(
	struct soap *soap)
{
	struct ns1__getPbomEndPartByPartNumber *_p = soap_new_ns1__getPbomEndPartByPartNumber(soap);
	if (_p)
	{	soap_default_ns1__getPbomEndPartByPartNumber(soap, _p);
	}
	return _p;
}

inline struct ns1__getPbomEndPartByPartNumber * soap_new_set_ns1__getPbomEndPartByPartNumber(
	struct soap *soap)
{
	struct ns1__getPbomEndPartByPartNumber *_p = soap_new_ns1__getPbomEndPartByPartNumber(soap);
	if (_p)
	{	soap_default_ns1__getPbomEndPartByPartNumber(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getPbomEndPartByPartNumber(struct soap*, const struct ns1__getPbomEndPartByPartNumber *, const char*, const char*);

inline int soap_write_ns1__getPbomEndPartByPartNumber(struct soap *soap, struct ns1__getPbomEndPartByPartNumber const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getPbomEndPartByPartNumber(soap, p), 0) || soap_put_ns1__getPbomEndPartByPartNumber(soap, p, "ns1:getPbomEndPartByPartNumber", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getPbomEndPartByPartNumber(struct soap *soap, const char *URL, struct ns1__getPbomEndPartByPartNumber const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getPbomEndPartByPartNumber(soap, p), 0) || soap_put_ns1__getPbomEndPartByPartNumber(soap, p, "ns1:getPbomEndPartByPartNumber", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getPbomEndPartByPartNumber(struct soap *soap, const char *URL, struct ns1__getPbomEndPartByPartNumber const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getPbomEndPartByPartNumber(soap, p), 0) || soap_put_ns1__getPbomEndPartByPartNumber(soap, p, "ns1:getPbomEndPartByPartNumber", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getPbomEndPartByPartNumber * SOAP_FMAC4 soap_get_ns1__getPbomEndPartByPartNumber(struct soap*, struct ns1__getPbomEndPartByPartNumber *, const char*, const char*);

inline int soap_read_ns1__getPbomEndPartByPartNumber(struct soap *soap, struct ns1__getPbomEndPartByPartNumber *p)
{
	if (p)
	{	soap_default_ns1__getPbomEndPartByPartNumber(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getPbomEndPartByPartNumber(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getPbomEndPartByPartNumber(struct soap *soap, const char *URL, struct ns1__getPbomEndPartByPartNumber *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getPbomEndPartByPartNumber(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getPbomEndPartByPartNumber(struct soap *soap, struct ns1__getPbomEndPartByPartNumber *p)
{
	if (soap_read_ns1__getPbomEndPartByPartNumber(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getPbomEndPartByPartNumberResponse_DEFINED
#define SOAP_TYPE_ns1__getPbomEndPartByPartNumberResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getPbomEndPartByPartNumberResponse(struct soap*, struct ns1__getPbomEndPartByPartNumberResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getPbomEndPartByPartNumberResponse(struct soap*, const struct ns1__getPbomEndPartByPartNumberResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getPbomEndPartByPartNumberResponse(struct soap*, const char*, int, const struct ns1__getPbomEndPartByPartNumberResponse *, const char*);
SOAP_FMAC3 struct ns1__getPbomEndPartByPartNumberResponse * SOAP_FMAC4 soap_in_ns1__getPbomEndPartByPartNumberResponse(struct soap*, const char*, struct ns1__getPbomEndPartByPartNumberResponse *, const char*);
SOAP_FMAC1 struct ns1__getPbomEndPartByPartNumberResponse * SOAP_FMAC2 soap_instantiate_ns1__getPbomEndPartByPartNumberResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getPbomEndPartByPartNumberResponse * soap_new_ns1__getPbomEndPartByPartNumberResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getPbomEndPartByPartNumberResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getPbomEndPartByPartNumberResponse * soap_new_req_ns1__getPbomEndPartByPartNumberResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getPbomEndPartByPartNumberResponse *_p = soap_new_ns1__getPbomEndPartByPartNumberResponse(soap);
	if (_p)
	{	soap_default_ns1__getPbomEndPartByPartNumberResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__getPbomEndPartByPartNumberResponse * soap_new_set_ns1__getPbomEndPartByPartNumberResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getPbomEndPartByPartNumberResponse *_p = soap_new_ns1__getPbomEndPartByPartNumberResponse(soap);
	if (_p)
	{	soap_default_ns1__getPbomEndPartByPartNumberResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getPbomEndPartByPartNumberResponse(struct soap*, const struct ns1__getPbomEndPartByPartNumberResponse *, const char*, const char*);

inline int soap_write_ns1__getPbomEndPartByPartNumberResponse(struct soap *soap, struct ns1__getPbomEndPartByPartNumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getPbomEndPartByPartNumberResponse(soap, p), 0) || soap_put_ns1__getPbomEndPartByPartNumberResponse(soap, p, "ns1:getPbomEndPartByPartNumberResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getPbomEndPartByPartNumberResponse(struct soap *soap, const char *URL, struct ns1__getPbomEndPartByPartNumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getPbomEndPartByPartNumberResponse(soap, p), 0) || soap_put_ns1__getPbomEndPartByPartNumberResponse(soap, p, "ns1:getPbomEndPartByPartNumberResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getPbomEndPartByPartNumberResponse(struct soap *soap, const char *URL, struct ns1__getPbomEndPartByPartNumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getPbomEndPartByPartNumberResponse(soap, p), 0) || soap_put_ns1__getPbomEndPartByPartNumberResponse(soap, p, "ns1:getPbomEndPartByPartNumberResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getPbomEndPartByPartNumberResponse * SOAP_FMAC4 soap_get_ns1__getPbomEndPartByPartNumberResponse(struct soap*, struct ns1__getPbomEndPartByPartNumberResponse *, const char*, const char*);

inline int soap_read_ns1__getPbomEndPartByPartNumberResponse(struct soap *soap, struct ns1__getPbomEndPartByPartNumberResponse *p)
{
	if (p)
	{	soap_default_ns1__getPbomEndPartByPartNumberResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getPbomEndPartByPartNumberResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getPbomEndPartByPartNumberResponse(struct soap *soap, const char *URL, struct ns1__getPbomEndPartByPartNumberResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getPbomEndPartByPartNumberResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getPbomEndPartByPartNumberResponse(struct soap *soap, struct ns1__getPbomEndPartByPartNumberResponse *p)
{
	if (soap_read_ns1__getPbomEndPartByPartNumberResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getorderbyoid_DEFINED
#define SOAP_TYPE_ns1__getorderbyoid_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getorderbyoid(struct soap*, struct ns1__getorderbyoid *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getorderbyoid(struct soap*, const struct ns1__getorderbyoid *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getorderbyoid(struct soap*, const char*, int, const struct ns1__getorderbyoid *, const char*);
SOAP_FMAC3 struct ns1__getorderbyoid * SOAP_FMAC4 soap_in_ns1__getorderbyoid(struct soap*, const char*, struct ns1__getorderbyoid *, const char*);
SOAP_FMAC1 struct ns1__getorderbyoid * SOAP_FMAC2 soap_instantiate_ns1__getorderbyoid(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getorderbyoid * soap_new_ns1__getorderbyoid(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getorderbyoid(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getorderbyoid * soap_new_req_ns1__getorderbyoid(
	struct soap *soap)
{
	struct ns1__getorderbyoid *_p = soap_new_ns1__getorderbyoid(soap);
	if (_p)
	{	soap_default_ns1__getorderbyoid(soap, _p);
	}
	return _p;
}

inline struct ns1__getorderbyoid * soap_new_set_ns1__getorderbyoid(
	struct soap *soap)
{
	struct ns1__getorderbyoid *_p = soap_new_ns1__getorderbyoid(soap);
	if (_p)
	{	soap_default_ns1__getorderbyoid(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getorderbyoid(struct soap*, const struct ns1__getorderbyoid *, const char*, const char*);

inline int soap_write_ns1__getorderbyoid(struct soap *soap, struct ns1__getorderbyoid const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getorderbyoid(soap, p), 0) || soap_put_ns1__getorderbyoid(soap, p, "ns1:getorderbyoid", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getorderbyoid(struct soap *soap, const char *URL, struct ns1__getorderbyoid const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getorderbyoid(soap, p), 0) || soap_put_ns1__getorderbyoid(soap, p, "ns1:getorderbyoid", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getorderbyoid(struct soap *soap, const char *URL, struct ns1__getorderbyoid const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getorderbyoid(soap, p), 0) || soap_put_ns1__getorderbyoid(soap, p, "ns1:getorderbyoid", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getorderbyoid * SOAP_FMAC4 soap_get_ns1__getorderbyoid(struct soap*, struct ns1__getorderbyoid *, const char*, const char*);

inline int soap_read_ns1__getorderbyoid(struct soap *soap, struct ns1__getorderbyoid *p)
{
	if (p)
	{	soap_default_ns1__getorderbyoid(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getorderbyoid(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getorderbyoid(struct soap *soap, const char *URL, struct ns1__getorderbyoid *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getorderbyoid(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getorderbyoid(struct soap *soap, struct ns1__getorderbyoid *p)
{
	if (soap_read_ns1__getorderbyoid(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getorderbyoidResponse_DEFINED
#define SOAP_TYPE_ns1__getorderbyoidResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getorderbyoidResponse(struct soap*, struct ns1__getorderbyoidResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getorderbyoidResponse(struct soap*, const struct ns1__getorderbyoidResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getorderbyoidResponse(struct soap*, const char*, int, const struct ns1__getorderbyoidResponse *, const char*);
SOAP_FMAC3 struct ns1__getorderbyoidResponse * SOAP_FMAC4 soap_in_ns1__getorderbyoidResponse(struct soap*, const char*, struct ns1__getorderbyoidResponse *, const char*);
SOAP_FMAC1 struct ns1__getorderbyoidResponse * SOAP_FMAC2 soap_instantiate_ns1__getorderbyoidResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getorderbyoidResponse * soap_new_ns1__getorderbyoidResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getorderbyoidResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getorderbyoidResponse * soap_new_req_ns1__getorderbyoidResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getorderbyoidResponse *_p = soap_new_ns1__getorderbyoidResponse(soap);
	if (_p)
	{	soap_default_ns1__getorderbyoidResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__getorderbyoidResponse * soap_new_set_ns1__getorderbyoidResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getorderbyoidResponse *_p = soap_new_ns1__getorderbyoidResponse(soap);
	if (_p)
	{	soap_default_ns1__getorderbyoidResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getorderbyoidResponse(struct soap*, const struct ns1__getorderbyoidResponse *, const char*, const char*);

inline int soap_write_ns1__getorderbyoidResponse(struct soap *soap, struct ns1__getorderbyoidResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getorderbyoidResponse(soap, p), 0) || soap_put_ns1__getorderbyoidResponse(soap, p, "ns1:getorderbyoidResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getorderbyoidResponse(struct soap *soap, const char *URL, struct ns1__getorderbyoidResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getorderbyoidResponse(soap, p), 0) || soap_put_ns1__getorderbyoidResponse(soap, p, "ns1:getorderbyoidResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getorderbyoidResponse(struct soap *soap, const char *URL, struct ns1__getorderbyoidResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getorderbyoidResponse(soap, p), 0) || soap_put_ns1__getorderbyoidResponse(soap, p, "ns1:getorderbyoidResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getorderbyoidResponse * SOAP_FMAC4 soap_get_ns1__getorderbyoidResponse(struct soap*, struct ns1__getorderbyoidResponse *, const char*, const char*);

inline int soap_read_ns1__getorderbyoidResponse(struct soap *soap, struct ns1__getorderbyoidResponse *p)
{
	if (p)
	{	soap_default_ns1__getorderbyoidResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getorderbyoidResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getorderbyoidResponse(struct soap *soap, const char *URL, struct ns1__getorderbyoidResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getorderbyoidResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getorderbyoidResponse(struct soap *soap, struct ns1__getorderbyoidResponse *p)
{
	if (soap_read_ns1__getorderbyoidResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__saveordertowc_DEFINED
#define SOAP_TYPE_ns1__saveordertowc_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveordertowc(struct soap*, struct ns1__saveordertowc *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveordertowc(struct soap*, const struct ns1__saveordertowc *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveordertowc(struct soap*, const char*, int, const struct ns1__saveordertowc *, const char*);
SOAP_FMAC3 struct ns1__saveordertowc * SOAP_FMAC4 soap_in_ns1__saveordertowc(struct soap*, const char*, struct ns1__saveordertowc *, const char*);
SOAP_FMAC1 struct ns1__saveordertowc * SOAP_FMAC2 soap_instantiate_ns1__saveordertowc(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveordertowc * soap_new_ns1__saveordertowc(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__saveordertowc(soap, n, NULL, NULL, NULL);
}

inline struct ns1__saveordertowc * soap_new_req_ns1__saveordertowc(
	struct soap *soap)
{
	struct ns1__saveordertowc *_p = soap_new_ns1__saveordertowc(soap);
	if (_p)
	{	soap_default_ns1__saveordertowc(soap, _p);
	}
	return _p;
}

inline struct ns1__saveordertowc * soap_new_set_ns1__saveordertowc(
	struct soap *soap)
{
	struct ns1__saveordertowc *_p = soap_new_ns1__saveordertowc(soap);
	if (_p)
	{	soap_default_ns1__saveordertowc(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveordertowc(struct soap*, const struct ns1__saveordertowc *, const char*, const char*);

inline int soap_write_ns1__saveordertowc(struct soap *soap, struct ns1__saveordertowc const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__saveordertowc(soap, p), 0) || soap_put_ns1__saveordertowc(soap, p, "ns1:saveordertowc", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__saveordertowc(struct soap *soap, const char *URL, struct ns1__saveordertowc const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__saveordertowc(soap, p), 0) || soap_put_ns1__saveordertowc(soap, p, "ns1:saveordertowc", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__saveordertowc(struct soap *soap, const char *URL, struct ns1__saveordertowc const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__saveordertowc(soap, p), 0) || soap_put_ns1__saveordertowc(soap, p, "ns1:saveordertowc", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__saveordertowc * SOAP_FMAC4 soap_get_ns1__saveordertowc(struct soap*, struct ns1__saveordertowc *, const char*, const char*);

inline int soap_read_ns1__saveordertowc(struct soap *soap, struct ns1__saveordertowc *p)
{
	if (p)
	{	soap_default_ns1__saveordertowc(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__saveordertowc(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__saveordertowc(struct soap *soap, const char *URL, struct ns1__saveordertowc *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__saveordertowc(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__saveordertowc(struct soap *soap, struct ns1__saveordertowc *p)
{
	if (soap_read_ns1__saveordertowc(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__saveordertowcResponse_DEFINED
#define SOAP_TYPE_ns1__saveordertowcResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveordertowcResponse(struct soap*, struct ns1__saveordertowcResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveordertowcResponse(struct soap*, const struct ns1__saveordertowcResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveordertowcResponse(struct soap*, const char*, int, const struct ns1__saveordertowcResponse *, const char*);
SOAP_FMAC3 struct ns1__saveordertowcResponse * SOAP_FMAC4 soap_in_ns1__saveordertowcResponse(struct soap*, const char*, struct ns1__saveordertowcResponse *, const char*);
SOAP_FMAC1 struct ns1__saveordertowcResponse * SOAP_FMAC2 soap_instantiate_ns1__saveordertowcResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveordertowcResponse * soap_new_ns1__saveordertowcResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__saveordertowcResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__saveordertowcResponse * soap_new_req_ns1__saveordertowcResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__saveordertowcResponse *_p = soap_new_ns1__saveordertowcResponse(soap);
	if (_p)
	{	soap_default_ns1__saveordertowcResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__saveordertowcResponse * soap_new_set_ns1__saveordertowcResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__saveordertowcResponse *_p = soap_new_ns1__saveordertowcResponse(soap);
	if (_p)
	{	soap_default_ns1__saveordertowcResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveordertowcResponse(struct soap*, const struct ns1__saveordertowcResponse *, const char*, const char*);

inline int soap_write_ns1__saveordertowcResponse(struct soap *soap, struct ns1__saveordertowcResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__saveordertowcResponse(soap, p), 0) || soap_put_ns1__saveordertowcResponse(soap, p, "ns1:saveordertowcResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__saveordertowcResponse(struct soap *soap, const char *URL, struct ns1__saveordertowcResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__saveordertowcResponse(soap, p), 0) || soap_put_ns1__saveordertowcResponse(soap, p, "ns1:saveordertowcResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__saveordertowcResponse(struct soap *soap, const char *URL, struct ns1__saveordertowcResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__saveordertowcResponse(soap, p), 0) || soap_put_ns1__saveordertowcResponse(soap, p, "ns1:saveordertowcResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__saveordertowcResponse * SOAP_FMAC4 soap_get_ns1__saveordertowcResponse(struct soap*, struct ns1__saveordertowcResponse *, const char*, const char*);

inline int soap_read_ns1__saveordertowcResponse(struct soap *soap, struct ns1__saveordertowcResponse *p)
{
	if (p)
	{	soap_default_ns1__saveordertowcResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__saveordertowcResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__saveordertowcResponse(struct soap *soap, const char *URL, struct ns1__saveordertowcResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__saveordertowcResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__saveordertowcResponse(struct soap *soap, struct ns1__saveordertowcResponse *p)
{
	if (soap_read_ns1__saveordertowcResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getPbomLinkByPartNumber_DEFINED
#define SOAP_TYPE_ns1__getPbomLinkByPartNumber_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getPbomLinkByPartNumber(struct soap*, struct ns1__getPbomLinkByPartNumber *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getPbomLinkByPartNumber(struct soap*, const struct ns1__getPbomLinkByPartNumber *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getPbomLinkByPartNumber(struct soap*, const char*, int, const struct ns1__getPbomLinkByPartNumber *, const char*);
SOAP_FMAC3 struct ns1__getPbomLinkByPartNumber * SOAP_FMAC4 soap_in_ns1__getPbomLinkByPartNumber(struct soap*, const char*, struct ns1__getPbomLinkByPartNumber *, const char*);
SOAP_FMAC1 struct ns1__getPbomLinkByPartNumber * SOAP_FMAC2 soap_instantiate_ns1__getPbomLinkByPartNumber(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getPbomLinkByPartNumber * soap_new_ns1__getPbomLinkByPartNumber(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getPbomLinkByPartNumber(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getPbomLinkByPartNumber * soap_new_req_ns1__getPbomLinkByPartNumber(
	struct soap *soap)
{
	struct ns1__getPbomLinkByPartNumber *_p = soap_new_ns1__getPbomLinkByPartNumber(soap);
	if (_p)
	{	soap_default_ns1__getPbomLinkByPartNumber(soap, _p);
	}
	return _p;
}

inline struct ns1__getPbomLinkByPartNumber * soap_new_set_ns1__getPbomLinkByPartNumber(
	struct soap *soap)
{
	struct ns1__getPbomLinkByPartNumber *_p = soap_new_ns1__getPbomLinkByPartNumber(soap);
	if (_p)
	{	soap_default_ns1__getPbomLinkByPartNumber(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getPbomLinkByPartNumber(struct soap*, const struct ns1__getPbomLinkByPartNumber *, const char*, const char*);

inline int soap_write_ns1__getPbomLinkByPartNumber(struct soap *soap, struct ns1__getPbomLinkByPartNumber const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getPbomLinkByPartNumber(soap, p), 0) || soap_put_ns1__getPbomLinkByPartNumber(soap, p, "ns1:getPbomLinkByPartNumber", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getPbomLinkByPartNumber(struct soap *soap, const char *URL, struct ns1__getPbomLinkByPartNumber const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getPbomLinkByPartNumber(soap, p), 0) || soap_put_ns1__getPbomLinkByPartNumber(soap, p, "ns1:getPbomLinkByPartNumber", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getPbomLinkByPartNumber(struct soap *soap, const char *URL, struct ns1__getPbomLinkByPartNumber const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getPbomLinkByPartNumber(soap, p), 0) || soap_put_ns1__getPbomLinkByPartNumber(soap, p, "ns1:getPbomLinkByPartNumber", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getPbomLinkByPartNumber * SOAP_FMAC4 soap_get_ns1__getPbomLinkByPartNumber(struct soap*, struct ns1__getPbomLinkByPartNumber *, const char*, const char*);

inline int soap_read_ns1__getPbomLinkByPartNumber(struct soap *soap, struct ns1__getPbomLinkByPartNumber *p)
{
	if (p)
	{	soap_default_ns1__getPbomLinkByPartNumber(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getPbomLinkByPartNumber(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getPbomLinkByPartNumber(struct soap *soap, const char *URL, struct ns1__getPbomLinkByPartNumber *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getPbomLinkByPartNumber(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getPbomLinkByPartNumber(struct soap *soap, struct ns1__getPbomLinkByPartNumber *p)
{
	if (soap_read_ns1__getPbomLinkByPartNumber(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getPbomLinkByPartNumberResponse_DEFINED
#define SOAP_TYPE_ns1__getPbomLinkByPartNumberResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getPbomLinkByPartNumberResponse(struct soap*, struct ns1__getPbomLinkByPartNumberResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getPbomLinkByPartNumberResponse(struct soap*, const struct ns1__getPbomLinkByPartNumberResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getPbomLinkByPartNumberResponse(struct soap*, const char*, int, const struct ns1__getPbomLinkByPartNumberResponse *, const char*);
SOAP_FMAC3 struct ns1__getPbomLinkByPartNumberResponse * SOAP_FMAC4 soap_in_ns1__getPbomLinkByPartNumberResponse(struct soap*, const char*, struct ns1__getPbomLinkByPartNumberResponse *, const char*);
SOAP_FMAC1 struct ns1__getPbomLinkByPartNumberResponse * SOAP_FMAC2 soap_instantiate_ns1__getPbomLinkByPartNumberResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getPbomLinkByPartNumberResponse * soap_new_ns1__getPbomLinkByPartNumberResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getPbomLinkByPartNumberResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getPbomLinkByPartNumberResponse * soap_new_req_ns1__getPbomLinkByPartNumberResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getPbomLinkByPartNumberResponse *_p = soap_new_ns1__getPbomLinkByPartNumberResponse(soap);
	if (_p)
	{	soap_default_ns1__getPbomLinkByPartNumberResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__getPbomLinkByPartNumberResponse * soap_new_set_ns1__getPbomLinkByPartNumberResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__getPbomLinkByPartNumberResponse *_p = soap_new_ns1__getPbomLinkByPartNumberResponse(soap);
	if (_p)
	{	soap_default_ns1__getPbomLinkByPartNumberResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getPbomLinkByPartNumberResponse(struct soap*, const struct ns1__getPbomLinkByPartNumberResponse *, const char*, const char*);

inline int soap_write_ns1__getPbomLinkByPartNumberResponse(struct soap *soap, struct ns1__getPbomLinkByPartNumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getPbomLinkByPartNumberResponse(soap, p), 0) || soap_put_ns1__getPbomLinkByPartNumberResponse(soap, p, "ns1:getPbomLinkByPartNumberResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getPbomLinkByPartNumberResponse(struct soap *soap, const char *URL, struct ns1__getPbomLinkByPartNumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getPbomLinkByPartNumberResponse(soap, p), 0) || soap_put_ns1__getPbomLinkByPartNumberResponse(soap, p, "ns1:getPbomLinkByPartNumberResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getPbomLinkByPartNumberResponse(struct soap *soap, const char *URL, struct ns1__getPbomLinkByPartNumberResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getPbomLinkByPartNumberResponse(soap, p), 0) || soap_put_ns1__getPbomLinkByPartNumberResponse(soap, p, "ns1:getPbomLinkByPartNumberResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getPbomLinkByPartNumberResponse * SOAP_FMAC4 soap_get_ns1__getPbomLinkByPartNumberResponse(struct soap*, struct ns1__getPbomLinkByPartNumberResponse *, const char*, const char*);

inline int soap_read_ns1__getPbomLinkByPartNumberResponse(struct soap *soap, struct ns1__getPbomLinkByPartNumberResponse *p)
{
	if (p)
	{	soap_default_ns1__getPbomLinkByPartNumberResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getPbomLinkByPartNumberResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getPbomLinkByPartNumberResponse(struct soap *soap, const char *URL, struct ns1__getPbomLinkByPartNumberResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getPbomLinkByPartNumberResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getPbomLinkByPartNumberResponse(struct soap *soap, struct ns1__getPbomLinkByPartNumberResponse *p)
{
	if (soap_read_ns1__getPbomLinkByPartNumberResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ping_DEFINED
#define SOAP_TYPE_ns1__ping_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__ping(struct soap*, struct ns1__ping *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ping(struct soap*, const struct ns1__ping *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ping(struct soap*, const char*, int, const struct ns1__ping *, const char*);
SOAP_FMAC3 struct ns1__ping * SOAP_FMAC4 soap_in_ns1__ping(struct soap*, const char*, struct ns1__ping *, const char*);
SOAP_FMAC1 struct ns1__ping * SOAP_FMAC2 soap_instantiate_ns1__ping(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__ping * soap_new_ns1__ping(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ping(soap, n, NULL, NULL, NULL);
}

inline struct ns1__ping * soap_new_req_ns1__ping(
	struct soap *soap)
{
	struct ns1__ping *_p = soap_new_ns1__ping(soap);
	if (_p)
	{	soap_default_ns1__ping(soap, _p);
	}
	return _p;
}

inline struct ns1__ping * soap_new_set_ns1__ping(
	struct soap *soap)
{
	struct ns1__ping *_p = soap_new_ns1__ping(soap);
	if (_p)
	{	soap_default_ns1__ping(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ping(struct soap*, const struct ns1__ping *, const char*, const char*);

inline int soap_write_ns1__ping(struct soap *soap, struct ns1__ping const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__ping(soap, p), 0) || soap_put_ns1__ping(soap, p, "ns1:ping", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ping(struct soap *soap, const char *URL, struct ns1__ping const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__ping(soap, p), 0) || soap_put_ns1__ping(soap, p, "ns1:ping", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ping(struct soap *soap, const char *URL, struct ns1__ping const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__ping(soap, p), 0) || soap_put_ns1__ping(soap, p, "ns1:ping", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__ping * SOAP_FMAC4 soap_get_ns1__ping(struct soap*, struct ns1__ping *, const char*, const char*);

inline int soap_read_ns1__ping(struct soap *soap, struct ns1__ping *p)
{
	if (p)
	{	soap_default_ns1__ping(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__ping(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ping(struct soap *soap, const char *URL, struct ns1__ping *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ping(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ping(struct soap *soap, struct ns1__ping *p)
{
	if (soap_read_ns1__ping(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__pingResponse_DEFINED
#define SOAP_TYPE_ns1__pingResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__pingResponse(struct soap*, struct ns1__pingResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__pingResponse(struct soap*, const struct ns1__pingResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__pingResponse(struct soap*, const char*, int, const struct ns1__pingResponse *, const char*);
SOAP_FMAC3 struct ns1__pingResponse * SOAP_FMAC4 soap_in_ns1__pingResponse(struct soap*, const char*, struct ns1__pingResponse *, const char*);
SOAP_FMAC1 struct ns1__pingResponse * SOAP_FMAC2 soap_instantiate_ns1__pingResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__pingResponse * soap_new_ns1__pingResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__pingResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__pingResponse * soap_new_req_ns1__pingResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__pingResponse *_p = soap_new_ns1__pingResponse(soap);
	if (_p)
	{	soap_default_ns1__pingResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__pingResponse * soap_new_set_ns1__pingResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__pingResponse *_p = soap_new_ns1__pingResponse(soap);
	if (_p)
	{	soap_default_ns1__pingResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__pingResponse(struct soap*, const struct ns1__pingResponse *, const char*, const char*);

inline int soap_write_ns1__pingResponse(struct soap *soap, struct ns1__pingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__pingResponse(soap, p), 0) || soap_put_ns1__pingResponse(soap, p, "ns1:pingResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__pingResponse(struct soap *soap, const char *URL, struct ns1__pingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__pingResponse(soap, p), 0) || soap_put_ns1__pingResponse(soap, p, "ns1:pingResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__pingResponse(struct soap *soap, const char *URL, struct ns1__pingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__pingResponse(soap, p), 0) || soap_put_ns1__pingResponse(soap, p, "ns1:pingResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__pingResponse * SOAP_FMAC4 soap_get_ns1__pingResponse(struct soap*, struct ns1__pingResponse *, const char*, const char*);

inline int soap_read_ns1__pingResponse(struct soap *soap, struct ns1__pingResponse *p)
{
	if (p)
	{	soap_default_ns1__pingResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__pingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__pingResponse(struct soap *soap, const char *URL, struct ns1__pingResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__pingResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__pingResponse(struct soap *soap, struct ns1__pingResponse *p)
{
	if (soap_read_ns1__pingResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__jmsexample_DEFINED
#define SOAP_TYPE_ns1__jmsexample_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__jmsexample(struct soap*, struct ns1__jmsexample *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__jmsexample(struct soap*, const struct ns1__jmsexample *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__jmsexample(struct soap*, const char*, int, const struct ns1__jmsexample *, const char*);
SOAP_FMAC3 struct ns1__jmsexample * SOAP_FMAC4 soap_in_ns1__jmsexample(struct soap*, const char*, struct ns1__jmsexample *, const char*);
SOAP_FMAC1 struct ns1__jmsexample * SOAP_FMAC2 soap_instantiate_ns1__jmsexample(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__jmsexample * soap_new_ns1__jmsexample(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__jmsexample(soap, n, NULL, NULL, NULL);
}

inline struct ns1__jmsexample * soap_new_req_ns1__jmsexample(
	struct soap *soap)
{
	struct ns1__jmsexample *_p = soap_new_ns1__jmsexample(soap);
	if (_p)
	{	soap_default_ns1__jmsexample(soap, _p);
	}
	return _p;
}

inline struct ns1__jmsexample * soap_new_set_ns1__jmsexample(
	struct soap *soap,
	char *arg1,
	char *arg2)
{
	struct ns1__jmsexample *_p = soap_new_ns1__jmsexample(soap);
	if (_p)
	{	soap_default_ns1__jmsexample(soap, _p);
		_p->arg1 = arg1;
		_p->arg2 = arg2;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__jmsexample(struct soap*, const struct ns1__jmsexample *, const char*, const char*);

inline int soap_write_ns1__jmsexample(struct soap *soap, struct ns1__jmsexample const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__jmsexample(soap, p), 0) || soap_put_ns1__jmsexample(soap, p, "ns1:jmsexample", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__jmsexample(struct soap *soap, const char *URL, struct ns1__jmsexample const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__jmsexample(soap, p), 0) || soap_put_ns1__jmsexample(soap, p, "ns1:jmsexample", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__jmsexample(struct soap *soap, const char *URL, struct ns1__jmsexample const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__jmsexample(soap, p), 0) || soap_put_ns1__jmsexample(soap, p, "ns1:jmsexample", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__jmsexample * SOAP_FMAC4 soap_get_ns1__jmsexample(struct soap*, struct ns1__jmsexample *, const char*, const char*);

inline int soap_read_ns1__jmsexample(struct soap *soap, struct ns1__jmsexample *p)
{
	if (p)
	{	soap_default_ns1__jmsexample(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__jmsexample(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__jmsexample(struct soap *soap, const char *URL, struct ns1__jmsexample *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__jmsexample(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__jmsexample(struct soap *soap, struct ns1__jmsexample *p)
{
	if (soap_read_ns1__jmsexample(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__jmsexampleResponse_DEFINED
#define SOAP_TYPE_ns1__jmsexampleResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__jmsexampleResponse(struct soap*, struct ns1__jmsexampleResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__jmsexampleResponse(struct soap*, const struct ns1__jmsexampleResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__jmsexampleResponse(struct soap*, const char*, int, const struct ns1__jmsexampleResponse *, const char*);
SOAP_FMAC3 struct ns1__jmsexampleResponse * SOAP_FMAC4 soap_in_ns1__jmsexampleResponse(struct soap*, const char*, struct ns1__jmsexampleResponse *, const char*);
SOAP_FMAC1 struct ns1__jmsexampleResponse * SOAP_FMAC2 soap_instantiate_ns1__jmsexampleResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__jmsexampleResponse * soap_new_ns1__jmsexampleResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__jmsexampleResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__jmsexampleResponse * soap_new_req_ns1__jmsexampleResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__jmsexampleResponse *_p = soap_new_ns1__jmsexampleResponse(soap);
	if (_p)
	{	soap_default_ns1__jmsexampleResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__jmsexampleResponse * soap_new_set_ns1__jmsexampleResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__jmsexampleResponse *_p = soap_new_ns1__jmsexampleResponse(soap);
	if (_p)
	{	soap_default_ns1__jmsexampleResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__jmsexampleResponse(struct soap*, const struct ns1__jmsexampleResponse *, const char*, const char*);

inline int soap_write_ns1__jmsexampleResponse(struct soap *soap, struct ns1__jmsexampleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__jmsexampleResponse(soap, p), 0) || soap_put_ns1__jmsexampleResponse(soap, p, "ns1:jmsexampleResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__jmsexampleResponse(struct soap *soap, const char *URL, struct ns1__jmsexampleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__jmsexampleResponse(soap, p), 0) || soap_put_ns1__jmsexampleResponse(soap, p, "ns1:jmsexampleResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__jmsexampleResponse(struct soap *soap, const char *URL, struct ns1__jmsexampleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__jmsexampleResponse(soap, p), 0) || soap_put_ns1__jmsexampleResponse(soap, p, "ns1:jmsexampleResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__jmsexampleResponse * SOAP_FMAC4 soap_get_ns1__jmsexampleResponse(struct soap*, struct ns1__jmsexampleResponse *, const char*, const char*);

inline int soap_read_ns1__jmsexampleResponse(struct soap *soap, struct ns1__jmsexampleResponse *p)
{
	if (p)
	{	soap_default_ns1__jmsexampleResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__jmsexampleResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__jmsexampleResponse(struct soap *soap, const char *URL, struct ns1__jmsexampleResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__jmsexampleResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__jmsexampleResponse(struct soap *soap, struct ns1__jmsexampleResponse *p)
{
	if (soap_read_ns1__jmsexampleResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetWSDL_DEFINED
#define SOAP_TYPE_ns1__GetWSDL_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetWSDL(struct soap*, struct ns1__GetWSDL *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetWSDL(struct soap*, const struct ns1__GetWSDL *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetWSDL(struct soap*, const char*, int, const struct ns1__GetWSDL *, const char*);
SOAP_FMAC3 struct ns1__GetWSDL * SOAP_FMAC4 soap_in_ns1__GetWSDL(struct soap*, const char*, struct ns1__GetWSDL *, const char*);
SOAP_FMAC1 struct ns1__GetWSDL * SOAP_FMAC2 soap_instantiate_ns1__GetWSDL(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetWSDL * soap_new_ns1__GetWSDL(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetWSDL(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetWSDL * soap_new_req_ns1__GetWSDL(
	struct soap *soap)
{
	struct ns1__GetWSDL *_p = soap_new_ns1__GetWSDL(soap);
	if (_p)
	{	soap_default_ns1__GetWSDL(soap, _p);
	}
	return _p;
}

inline struct ns1__GetWSDL * soap_new_set_ns1__GetWSDL(
	struct soap *soap)
{
	struct ns1__GetWSDL *_p = soap_new_ns1__GetWSDL(soap);
	if (_p)
	{	soap_default_ns1__GetWSDL(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetWSDL(struct soap*, const struct ns1__GetWSDL *, const char*, const char*);

inline int soap_write_ns1__GetWSDL(struct soap *soap, struct ns1__GetWSDL const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__GetWSDL(soap, p), 0) || soap_put_ns1__GetWSDL(soap, p, "ns1:GetWSDL", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetWSDL(struct soap *soap, const char *URL, struct ns1__GetWSDL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__GetWSDL(soap, p), 0) || soap_put_ns1__GetWSDL(soap, p, "ns1:GetWSDL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetWSDL(struct soap *soap, const char *URL, struct ns1__GetWSDL const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__GetWSDL(soap, p), 0) || soap_put_ns1__GetWSDL(soap, p, "ns1:GetWSDL", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetWSDL * SOAP_FMAC4 soap_get_ns1__GetWSDL(struct soap*, struct ns1__GetWSDL *, const char*, const char*);

inline int soap_read_ns1__GetWSDL(struct soap *soap, struct ns1__GetWSDL *p)
{
	if (p)
	{	soap_default_ns1__GetWSDL(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__GetWSDL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetWSDL(struct soap *soap, const char *URL, struct ns1__GetWSDL *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GetWSDL(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetWSDL(struct soap *soap, struct ns1__GetWSDL *p)
{
	if (soap_read_ns1__GetWSDL(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GetWSDLResponse_DEFINED
#define SOAP_TYPE_ns1__GetWSDLResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetWSDLResponse(struct soap*, struct ns1__GetWSDLResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetWSDLResponse(struct soap*, const struct ns1__GetWSDLResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetWSDLResponse(struct soap*, const char*, int, const struct ns1__GetWSDLResponse *, const char*);
SOAP_FMAC3 struct ns1__GetWSDLResponse * SOAP_FMAC4 soap_in_ns1__GetWSDLResponse(struct soap*, const char*, struct ns1__GetWSDLResponse *, const char*);
SOAP_FMAC1 struct ns1__GetWSDLResponse * SOAP_FMAC2 soap_instantiate_ns1__GetWSDLResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetWSDLResponse * soap_new_ns1__GetWSDLResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetWSDLResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__GetWSDLResponse * soap_new_req_ns1__GetWSDLResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__GetWSDLResponse *_p = soap_new_ns1__GetWSDLResponse(soap);
	if (_p)
	{	soap_default_ns1__GetWSDLResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__GetWSDLResponse * soap_new_set_ns1__GetWSDLResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__GetWSDLResponse *_p = soap_new_ns1__GetWSDLResponse(soap);
	if (_p)
	{	soap_default_ns1__GetWSDLResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetWSDLResponse(struct soap*, const struct ns1__GetWSDLResponse *, const char*, const char*);

inline int soap_write_ns1__GetWSDLResponse(struct soap *soap, struct ns1__GetWSDLResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__GetWSDLResponse(soap, p), 0) || soap_put_ns1__GetWSDLResponse(soap, p, "ns1:GetWSDLResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetWSDLResponse(struct soap *soap, const char *URL, struct ns1__GetWSDLResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__GetWSDLResponse(soap, p), 0) || soap_put_ns1__GetWSDLResponse(soap, p, "ns1:GetWSDLResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetWSDLResponse(struct soap *soap, const char *URL, struct ns1__GetWSDLResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__GetWSDLResponse(soap, p), 0) || soap_put_ns1__GetWSDLResponse(soap, p, "ns1:GetWSDLResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__GetWSDLResponse * SOAP_FMAC4 soap_get_ns1__GetWSDLResponse(struct soap*, struct ns1__GetWSDLResponse *, const char*, const char*);

inline int soap_read_ns1__GetWSDLResponse(struct soap *soap, struct ns1__GetWSDLResponse *p)
{
	if (p)
	{	soap_default_ns1__GetWSDLResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__GetWSDLResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetWSDLResponse(struct soap *soap, const char *URL, struct ns1__GetWSDLResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GetWSDLResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GetWSDLResponse(struct soap *soap, struct ns1__GetWSDLResponse *p)
{
	if (soap_read_ns1__GetWSDLResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ExecuteSoapJmsRPC_DEFINED
#define SOAP_TYPE_ns1__ExecuteSoapJmsRPC_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__ExecuteSoapJmsRPC(struct soap*, struct ns1__ExecuteSoapJmsRPC *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ExecuteSoapJmsRPC(struct soap*, const struct ns1__ExecuteSoapJmsRPC *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExecuteSoapJmsRPC(struct soap*, const char*, int, const struct ns1__ExecuteSoapJmsRPC *, const char*);
SOAP_FMAC3 struct ns1__ExecuteSoapJmsRPC * SOAP_FMAC4 soap_in_ns1__ExecuteSoapJmsRPC(struct soap*, const char*, struct ns1__ExecuteSoapJmsRPC *, const char*);
SOAP_FMAC1 struct ns1__ExecuteSoapJmsRPC * SOAP_FMAC2 soap_instantiate_ns1__ExecuteSoapJmsRPC(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__ExecuteSoapJmsRPC * soap_new_ns1__ExecuteSoapJmsRPC(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ExecuteSoapJmsRPC(soap, n, NULL, NULL, NULL);
}

inline struct ns1__ExecuteSoapJmsRPC * soap_new_req_ns1__ExecuteSoapJmsRPC(
	struct soap *soap)
{
	struct ns1__ExecuteSoapJmsRPC *_p = soap_new_ns1__ExecuteSoapJmsRPC(soap);
	if (_p)
	{	soap_default_ns1__ExecuteSoapJmsRPC(soap, _p);
	}
	return _p;
}

inline struct ns1__ExecuteSoapJmsRPC * soap_new_set_ns1__ExecuteSoapJmsRPC(
	struct soap *soap)
{
	struct ns1__ExecuteSoapJmsRPC *_p = soap_new_ns1__ExecuteSoapJmsRPC(soap);
	if (_p)
	{	soap_default_ns1__ExecuteSoapJmsRPC(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ExecuteSoapJmsRPC(struct soap*, const struct ns1__ExecuteSoapJmsRPC *, const char*, const char*);

inline int soap_write_ns1__ExecuteSoapJmsRPC(struct soap *soap, struct ns1__ExecuteSoapJmsRPC const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__ExecuteSoapJmsRPC(soap, p), 0) || soap_put_ns1__ExecuteSoapJmsRPC(soap, p, "ns1:ExecuteSoapJmsRPC", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExecuteSoapJmsRPC(struct soap *soap, const char *URL, struct ns1__ExecuteSoapJmsRPC const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__ExecuteSoapJmsRPC(soap, p), 0) || soap_put_ns1__ExecuteSoapJmsRPC(soap, p, "ns1:ExecuteSoapJmsRPC", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExecuteSoapJmsRPC(struct soap *soap, const char *URL, struct ns1__ExecuteSoapJmsRPC const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__ExecuteSoapJmsRPC(soap, p), 0) || soap_put_ns1__ExecuteSoapJmsRPC(soap, p, "ns1:ExecuteSoapJmsRPC", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__ExecuteSoapJmsRPC * SOAP_FMAC4 soap_get_ns1__ExecuteSoapJmsRPC(struct soap*, struct ns1__ExecuteSoapJmsRPC *, const char*, const char*);

inline int soap_read_ns1__ExecuteSoapJmsRPC(struct soap *soap, struct ns1__ExecuteSoapJmsRPC *p)
{
	if (p)
	{	soap_default_ns1__ExecuteSoapJmsRPC(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__ExecuteSoapJmsRPC(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExecuteSoapJmsRPC(struct soap *soap, const char *URL, struct ns1__ExecuteSoapJmsRPC *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ExecuteSoapJmsRPC(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ExecuteSoapJmsRPC(struct soap *soap, struct ns1__ExecuteSoapJmsRPC *p)
{
	if (soap_read_ns1__ExecuteSoapJmsRPC(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ExecuteSoapJmsRPCResponse_DEFINED
#define SOAP_TYPE_ns1__ExecuteSoapJmsRPCResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__ExecuteSoapJmsRPCResponse(struct soap*, struct ns1__ExecuteSoapJmsRPCResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ExecuteSoapJmsRPCResponse(struct soap*, const struct ns1__ExecuteSoapJmsRPCResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExecuteSoapJmsRPCResponse(struct soap*, const char*, int, const struct ns1__ExecuteSoapJmsRPCResponse *, const char*);
SOAP_FMAC3 struct ns1__ExecuteSoapJmsRPCResponse * SOAP_FMAC4 soap_in_ns1__ExecuteSoapJmsRPCResponse(struct soap*, const char*, struct ns1__ExecuteSoapJmsRPCResponse *, const char*);
SOAP_FMAC1 struct ns1__ExecuteSoapJmsRPCResponse * SOAP_FMAC2 soap_instantiate_ns1__ExecuteSoapJmsRPCResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__ExecuteSoapJmsRPCResponse * soap_new_ns1__ExecuteSoapJmsRPCResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ExecuteSoapJmsRPCResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__ExecuteSoapJmsRPCResponse * soap_new_req_ns1__ExecuteSoapJmsRPCResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__ExecuteSoapJmsRPCResponse *_p = soap_new_ns1__ExecuteSoapJmsRPCResponse(soap);
	if (_p)
	{	soap_default_ns1__ExecuteSoapJmsRPCResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}

inline struct ns1__ExecuteSoapJmsRPCResponse * soap_new_set_ns1__ExecuteSoapJmsRPCResponse(
	struct soap *soap,
	char *Collection)
{
	struct ns1__ExecuteSoapJmsRPCResponse *_p = soap_new_ns1__ExecuteSoapJmsRPCResponse(soap);
	if (_p)
	{	soap_default_ns1__ExecuteSoapJmsRPCResponse(soap, _p);
		_p->Collection = Collection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ExecuteSoapJmsRPCResponse(struct soap*, const struct ns1__ExecuteSoapJmsRPCResponse *, const char*, const char*);

inline int soap_write_ns1__ExecuteSoapJmsRPCResponse(struct soap *soap, struct ns1__ExecuteSoapJmsRPCResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__ExecuteSoapJmsRPCResponse(soap, p), 0) || soap_put_ns1__ExecuteSoapJmsRPCResponse(soap, p, "ns1:ExecuteSoapJmsRPCResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExecuteSoapJmsRPCResponse(struct soap *soap, const char *URL, struct ns1__ExecuteSoapJmsRPCResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__ExecuteSoapJmsRPCResponse(soap, p), 0) || soap_put_ns1__ExecuteSoapJmsRPCResponse(soap, p, "ns1:ExecuteSoapJmsRPCResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExecuteSoapJmsRPCResponse(struct soap *soap, const char *URL, struct ns1__ExecuteSoapJmsRPCResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__ExecuteSoapJmsRPCResponse(soap, p), 0) || soap_put_ns1__ExecuteSoapJmsRPCResponse(soap, p, "ns1:ExecuteSoapJmsRPCResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__ExecuteSoapJmsRPCResponse * SOAP_FMAC4 soap_get_ns1__ExecuteSoapJmsRPCResponse(struct soap*, struct ns1__ExecuteSoapJmsRPCResponse *, const char*, const char*);

inline int soap_read_ns1__ExecuteSoapJmsRPCResponse(struct soap *soap, struct ns1__ExecuteSoapJmsRPCResponse *p)
{
	if (p)
	{	soap_default_ns1__ExecuteSoapJmsRPCResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__ExecuteSoapJmsRPCResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExecuteSoapJmsRPCResponse(struct soap *soap, const char *URL, struct ns1__ExecuteSoapJmsRPCResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ExecuteSoapJmsRPCResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ExecuteSoapJmsRPCResponse(struct soap *soap, struct ns1__ExecuteSoapJmsRPCResponse *p)
{
	if (soap_read_ns1__ExecuteSoapJmsRPCResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new__QName(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__QName(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (soap_read__QName(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (soap_read_string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

/* End of soapH.h */
